:mod:`opendrift.models.oceandrift`
==================================

.. py:module:: opendrift.models.oceandrift


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   opendrift.models.oceandrift.Lagrangian3DArray
   opendrift.models.oceandrift.OceanDrift



.. py:class:: Lagrangian3DArray(**kwargs)

   Bases: :class:`opendrift.elements.LagrangianArray`

   Extending LagrangianArray for elements moving in 3 dimensions
   The Particle may be buoyant and/or subject to vertical mixing
   buoyant bahaviour is described by terminal velocity

   .. attribute:: variables
      

      


.. py:class:: OceanDrift(*args, **kwargs)

   Bases: :class:`opendrift.models.basemodel.OpenDriftSimulation`

   Open source buoyant particle trajectory model based on OpenDrift.

   Developed at MET Norway

   Generic module for particles that move in 3 dimensions
   and may be to vertical turbulent mixing
   with the possibility for positive or negative buoyancy

   Particles could be e.g. oil droplets, plankton, nutrients or sediments,
   Model may be subclassed for more specific behaviour.

   .. attribute:: ElementType
      

      

   .. attribute:: max_speed
      :annotation: = 1

      

   .. attribute:: required_variables
      

      

   .. attribute:: required_profiles_z_range
      

      

   .. method:: update(self)

      Update positions and properties of elements.


   .. method:: disable_vertical_motion(self)

      Deactivate any vertical processes/advection


   .. method:: update_terminal_velocity(self, Tprofiles=None, Sprofiles=None, z_index=None)

      Calculate terminal velocity due to bouyancy from own properties
      and environmental variables. Sub-modules should overload
      this method for particle-specific behaviour


   .. method:: prepare_vertical_mixing(self)


   .. method:: vertical_advection(self)

      Move particles vertically according to vertical ocean current

      Vertical advection by ocean currents is normally small
      compared to termical velocity


   .. method:: vertical_buoyancy(self)

      Move particles vertically according to their buoyancy


   .. method:: surface_stick(self)

      To be overloaded by subclasses, e.g. downward mixing of oil


   .. method:: bottom_interaction(self, Zmin=None)

      To be overloaded by subclasses, e.g. radionuclides in sediments


   .. method:: surface_wave_mixing(self, time_step_seconds)

      To be overloaded by subclasses, e.g. downward mixing of oil


   .. method:: get_diffusivity_profile(self, model)


   .. method:: vertical_mixing(self, store_depths=False)

      Mix particles vertically according to eddy diffusivity and buoyancy

      Buoyancy is expressed as terminal velocity, which is the
      steady-state vertical velocity due to positive or negative
      buoyant behaviour. It is usually a function of particle density,
      diameter, and shape.

      Vertical particle displacemend du to turbulent mixing is
      calculated using a random walk scheme" (Visser et al. 1996)


   .. method:: animate_vertical_distribution(self, depths=None, maxdepth=None, bins=50, filename=None)

      Function to animate vertical distribution of particles


   .. method:: plot_vertical_distribution(self)

      Function to plot vertical distribution of particles


   .. method:: plotter_vertical_distribution_time(self, ax=None, mask=None, dz=1.0, maxrange=-100, bins=None, step=1)

      Function to plot vertical distribution of particles.

      Use mask to plot any selection of particles.




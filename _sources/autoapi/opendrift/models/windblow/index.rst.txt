opendrift.models.windblow
=========================

.. py:module:: opendrift.models.windblow


Attributes
----------

.. autoapisummary::

   opendrift.models.windblow.logger


Classes
-------

.. autoapisummary::

   opendrift.models.windblow.WindBlow


Module Contents
---------------

.. py:data:: logger

.. py:class:: WindBlow(*args, **kwargs)

   Bases: :py:obj:`opendrift.models.basemodel.OpenDriftSimulation`


   Demonstration trajectory model based on OpenDrift framework.

   Simply advects a particle (passive tracer with
   no properties except for position) with the ambient wind.

   Initialise OpenDriftSimulation

   Args:
       seed: integer or None. A given integer will yield identical
           random numbers drawn each simulation. Random numbers are
           e.g. used to distribute particles spatially when seeding,
           and may be used by modules (subclasses) for e.g. diffusion.
           Specifying a fixed value (default: 0) is useful for sensitivity
           tests. With seed = None, different random numbers will be drawn
           for subsequent runs, even with identical configuration/input.
       iomodule: name of module used to export data
           default: netcdf, see :py:mod:`opendrift.io` for more alternatives.
           `iomodule` is module/filename without preceeding `io_`
       loglevel: set to 0 (default) to retrieve all debug information.
           Provide a higher value (e.g. 20) to receive less output.
           Use the string 'custom' to configure logging from outside.
       logtime: if True, a time stamp is given for each logging line.
                logtime can also be given as a python time specifier
                (e.g. '%H:%M:%S')


   .. py:attribute:: ElementType


   .. py:attribute:: required_variables


   .. py:method:: update()

      Any trajectory model implementation must define an update method.
      This method must/can use environment data (self.environment) to
      update properties (including position) of its particles (self.elements)




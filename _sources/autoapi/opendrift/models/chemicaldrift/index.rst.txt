:mod:`opendrift.models.chemicaldrift`
=====================================

.. py:module:: opendrift.models.chemicaldrift

.. autoapi-nested-parse::

   ChemicalDrift is an OpenDrift module for drift and fate of chemicals.
   The module is under development within the scope of the Horizon2020 project EMERGE
   Manuel Aghito. Norwegian Meteorological Institute. 2020.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   opendrift.models.chemicaldrift.ChemicalElement
   opendrift.models.chemicaldrift.ChemicalDrift



.. data:: logger
   

   

.. py:class:: ChemicalElement(**kwargs)

   Bases: :class:`opendrift.models.oceandrift.Lagrangian3DArray`

   Extending LagrangianArray for elements moving in 3 dimensions
   The Particle may be buoyant and/or subject to vertical mixing
   buoyant bahaviour is described by terminal velocity

   Initialises a LagrangianArray with given properties.

   Args:
       Keyword arguments (kwargs) with names corresponding to the
       OrderedDict 'variables' of the class, and corresponding values.
       The values must be ndarrays of equal length, or scalars.
       All (or none) variables must be given, unless a default value
       is specified in the OrderedDict 'variables'
       An empty object may be created by giving no input.

   .. attribute:: variables
      

      


.. py:class:: ChemicalDrift(*args, **kwargs)

   Bases: :class:`opendrift.models.oceandrift.OceanDrift`

   Model for chemical drift, under development
       

   Constructor of ChemicalDrift module
           

   .. attribute:: ElementType
      

      

   .. attribute:: required_variables
      

      

   .. method:: update(self)

      Update positions and properties of chemical particles.
              


   .. method:: bottom_interaction(self, seafloor_depth)

      Sub method of vertical_mixing, determines settling


   .. method:: resuspension(self)

      Resuspending elements if current speed > .5 m/s


   .. method:: seed_from_STEAM(self, steam, lowerbound=0, radius=0, **kwargs)

      Seed elements based on a dataarray with STEAM emission data

      Arguments:
          steam: dataarray with steam emission data, with coordinates
              * latitude   (latitude) float32
              * longitude  (longitude) float32
              * time       (time) datetime64[ns]
          
          
          radius:      scalar, unit: meters
          lowerbound:  scalar, elements with lower values are discarded




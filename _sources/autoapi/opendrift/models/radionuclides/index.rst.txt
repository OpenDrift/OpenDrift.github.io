:mod:`opendrift.models.radionuclides`
=====================================

.. py:module:: opendrift.models.radionuclides


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   opendrift.models.radionuclides.Radionuclide
   opendrift.models.radionuclides.RadionuclideDrift



.. py:class:: Radionuclide(**kwargs)

   Bases: :class:`opendrift.models.oceandrift.Lagrangian3DArray`

   Extending Lagrangian3DArray with specific properties for radionuclides
       

   .. attribute:: variables
      

      


.. py:class:: RadionuclideDrift(*args, **kwargs)

   Bases: :class:`opendrift.models.oceandrift.OceanDrift`

   Radionuclide particle trajectory model based on the OpenDrift framework.

   Developed at MET Norway

   Generic module for particles that are subject to vertical turbulent
   mixing with the possibility for positive or negative buoyancy

   Particles could be e.g. oil droplets, plankton, or sediments

   Radionuclide functionality include interactions with solid matter
   (particles and sediments) through transformation processes, implemented
   with stochastic approach for speciation.

   Under construction.

   .. attribute:: ElementType
      

      

   .. attribute:: required_variables
      

      

   .. attribute:: required_profiles_z_range
      

      

   .. method:: specie_num2name(self, num)


   .. method:: specie_name2num(self, name)


   .. method:: prepare_run(self)


   .. method:: init_transfer_rates(self)

      Initialization of background values in the transfer rates 2D array.
              


   .. method:: update_terminal_velocity(self, Tprofiles=None, Sprofiles=None, z_index=None)

      Calculate terminal velocity for Pelagic Egg

      according to
      S. Sundby (1983): A one-dimensional model for the vertical
      distribution of pelagic fish eggs in the mixed layer
      Deep Sea Research (30) pp. 645-661

      Method copied from ibm.f90 module of LADIM:
      Vikebo, F., S. Sundby, B. Aadlandsvik and O. Otteraa (2007),
      Fish. Oceanogr. (16) pp. 216-228


   .. method:: update_transfer_rates(self)

      Pick out the correct row from transfer_rates for each element. Modify the
      transfer rates according to local environmental conditions 


   .. method:: update_speciation(self)

      Check if transformation processes shall occur
      Do transformation (change value of self.elements.specie)
      Update element properties for the transformed elements


   .. method:: sorption_to_sediments(self, sp_in=None, sp_out=None)

      Update radionuclide properties  when sorption to sediments occurs


   .. method:: desorption_from_sediments(self, sp_in=None, sp_out=None)

      Update radionuclide properties when desorption from sediments occurs


   .. method:: update_radionuclide_diameter(self, sp_in=None, sp_out=None)

      Update the diameter of the radionuclides when specie is changed


   .. method:: bottom_interaction(self, Zmin=None)

      Change speciation of radionuclides that reach bottom due to settling.
      particle specie -> sediment specie 


   .. method:: resuspension(self)

      Simple method to estimate the resuspension of sedimented particles,
      checking whether the current speed near the bottom is above a critical velocity
      Sediment species -> Particle specie


   .. method:: update(self)

      Update positions and properties of radionuclide particles.


   .. method:: write_netcdf_radionuclide_density_map(self, filename, pixelsize_m='auto', zlevels=None, deltat=None, density_proj=None, llcrnrlon=None, llcrnrlat=None, urcrnrlon=None, urcrnrlat=None, activity_unit=None, time_avg_conc=False, horizontal_smoothing=False, smoothing_cells=0)

      Write netCDF file with map of radionuclide species densities and concentrations


   .. method:: get_radionuclide_density_array(self, pixelsize_m, z_array, density_proj=None, llcrnrlon=None, llcrnrlat=None, urcrnrlon=None, urcrnrlat=None, weight=None)

      compute a particle concentration map from particle positions
      Use user defined projection (density_proj=<proj4_string>)
      or create a lon/lat grid (density_proj=None)


   .. method:: get_pixel_mean_depth(self, lons, lats)


   .. method:: horizontal_smooth(self, a, n=0)




:py:mod:`opendrift.models.openoil.adios.oil`
============================================

.. py:module:: opendrift.models.openoil.adios.oil

.. autoapi-nested-parse::

   Interface to the ADIOS oil database.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.adios.oil.OpendriftOil



Functions
~~~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.adios.oil.__require_gnome_oil__



Attributes
~~~~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.adios.oil.logger


.. py:data:: logger
   

   

.. py:exception:: NotFullOil

   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.

   Initialize self.  See help(type(self)) for accurate signature.


.. py:function:: __require_gnome_oil__(f)


.. py:class:: OpendriftOil(o)

   .. py:attribute:: id
      :annotation: :str

      

   .. py:attribute:: type
      :annotation: :str

      

   .. py:attribute:: name
      :annotation: :str

      

   .. py:attribute:: API
      :annotation: :float

      

   .. py:attribute:: gnome_suitable
      :annotation: :bool

      

   .. py:attribute:: labels
      :annotation: :List[str]

      

   .. py:attribute:: location
      :annotation: :str

      

   .. py:attribute:: model_completeness
      :annotation: :float

      

   .. py:attribute:: product_type
      :annotation: :str

      

   .. py:attribute:: sample_date
      :annotation: :str

      

   .. py:attribute:: data
      :annotation: :dict

      

   .. py:attribute:: oil
      :annotation: :opendrift.models.openoil.adios.models.oil.oil.Oil

      

   .. py:attribute:: gnome_oil
      :annotation: :dict

      

   .. py:method:: __repr__(self)

      Return repr(self).


   .. py:method:: json(self)


   .. py:method:: make_full(self)


   .. py:method:: valid(self)

      Check whether this oil can be used in Opendrift simulations.


   .. py:method:: density_at_temp(self, t, unit='K')

      Return density at temperature (in Kelvin by default).


   .. py:method:: kvis_at_temp(self, t, unit='K')


   .. py:method:: mass_fraction(self)
      :property:


   .. py:method:: oil_water_surface_tension(self)


   .. py:method:: bulltime(self)
      :property:


   .. py:method:: bullwinkle(self)
      :property:


   .. py:method:: emulsion_water_fraction_max(self)
      :property:


   .. py:method:: vapor_pressure(self, temp)

      Calculate vapor pressure. This method is taken from the old oil_library.

      Args:

          temp: temperature in Kelvin.

      Returns:

          Array of vapor pressures for each component. Pascal.


   .. py:method:: molecular_weight(self)
      :property:


   .. py:method:: k0y(self)
      :property:




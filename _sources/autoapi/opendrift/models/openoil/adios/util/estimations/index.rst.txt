:py:mod:`opendrift.models.openoil.adios.util.estimations`
=========================================================

.. py:module:: opendrift.models.openoil.adios.util.estimations

.. autoapi-nested-parse::

   Oil Properties Estimations.

   These are primitive estimation algorithms to be used primarily for
   estimating oil properties based on known measured values.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.adios.util.estimations.density_from_api
   opendrift.models.openoil.adios.util.estimations.api_from_density
   opendrift.models.openoil.adios.util.estimations.density_at_temp
   opendrift.models.openoil.adios.util.estimations.vol_expansion_coeff
   opendrift.models.openoil.adios.util.estimations.specific_gravity
   opendrift.models.openoil.adios.util.estimations.dvis_to_kvis
   opendrift.models.openoil.adios.util.estimations.kvis_at_temp
   opendrift.models.openoil.adios.util.estimations.resin_fraction
   opendrift.models.openoil.adios.util.estimations.asphaltene_fraction
   opendrift.models.openoil.adios.util.estimations.saturates_fraction
   opendrift.models.openoil.adios.util.estimations.aromatics_fraction
   opendrift.models.openoil.adios.util.estimations._A_coeff
   opendrift.models.openoil.adios.util.estimations._B_coeff
   opendrift.models.openoil.adios.util.estimations.cut_temps_from_api
   opendrift.models.openoil.adios.util.estimations.fmasses_from_cuts
   opendrift.models.openoil.adios.util.estimations.fmasses_flat_dist
   opendrift.models.openoil.adios.util.estimations.saturate_mol_wt
   opendrift.models.openoil.adios.util.estimations.aromatic_mol_wt
   opendrift.models.openoil.adios.util.estimations.resin_mol_wt
   opendrift.models.openoil.adios.util.estimations.asphaltene_mol_wt
   opendrift.models.openoil.adios.util.estimations.trial_densities
   opendrift.models.openoil.adios.util.estimations.saturate_densities
   opendrift.models.openoil.adios.util.estimations.aromatic_densities
   opendrift.models.openoil.adios.util.estimations.resin_densities
   opendrift.models.openoil.adios.util.estimations.asphaltene_densities
   opendrift.models.openoil.adios.util.estimations._hydrocarbon_characterization_param
   opendrift.models.openoil.adios.util.estimations.refractive_index
   opendrift.models.openoil.adios.util.estimations._hydrocarbon_grouping_param
   opendrift.models.openoil.adios.util.estimations.saturate_mass_fraction
   opendrift.models.openoil.adios.util.estimations.oil_water_surface_tension_from_api
   opendrift.models.openoil.adios.util.estimations.pour_point_from_kvis
   opendrift.models.openoil.adios.util.estimations.pour_point_from_sg_mw_kvis
   opendrift.models.openoil.adios.util.estimations.flash_point_from_bp
   opendrift.models.openoil.adios.util.estimations.flash_point_from_api
   opendrift.models.openoil.adios.util.estimations.bullwinkle_fraction_from_asph
   opendrift.models.openoil.adios.util.estimations.bullwinkle_fraction_from_api



.. py:function:: density_from_api(api)

   Source: Adios2

   API is a measure of how heavy an oil is compared to water.
   So it is a different unit for specific gravity


.. py:function:: api_from_density(density)

   Source: Adios2


.. py:function:: density_at_temp(ref_density, ref_temp_k, temp_k, k_rho_t=0.0008)

   Source: Adios2

   If we have an oil density at a reference temperature,
   then we can estimate what its density might be at
   another temperature.

   NOTE: need a reference for the coefficient of expansion


.. py:function:: vol_expansion_coeff(rho_0, t_0, rho_1, t_1)

   Calculate the volumetric expansion coefficient of a liquid
   based on a set of two densities and their associated temperatures.


.. py:function:: specific_gravity(density)

   Specific Gravity of Oil with respect to water at 15C (definition used
   for API gravity)


.. py:function:: dvis_to_kvis(dvis, density)

   Source: Definition of kinematic viscosity.

   Conversion from dynamic viscosity to kinematic viscosity.


.. py:function:: kvis_at_temp(ref_kvis, ref_temp_k, temp_k, k_v2=2416.0)

   Source: Adios2

   If we have an oil kinematic viscosity at a reference temperature,
   then we can estimate what its viscosity might be at
   another temperature.

   Note: Bill's most recent viscosity document, and an analysis of the
         multi-KVis oils in our oil library suggest that a value of
         2416.0 (Abu Eishah 1999) would be a good default value for k_v2.


.. py:function:: resin_fraction(density, viscosity, f_other=0.0)


.. py:function:: asphaltene_fraction(density, viscosity, f_other=0.0)


.. py:function:: saturates_fraction(density, viscosity, f_other=0.0)


.. py:function:: aromatics_fraction(f_res, f_asph, f_sat)


.. py:function:: _A_coeff(density)

   Source: Fingas empirical formulas that are based upon analysis
           of ESTC oil properties database.

   This is an intermediate calculation for a coefficient to be
   used to generate the inert mass fractions of an oil.


.. py:function:: _B_coeff(density, viscosity)

   Source: Fingas empirical formulas that are based upon analysis
           of ESTC oil properties database.

   This is an intermediate calculation for a coefficient to be
   used to generate the inert mass fractions of an oil.


.. py:function:: cut_temps_from_api(api, N=5)

   Source: Adios2 & Jones R. (1997),
           A Simplified Pseudo-component Oil Evaporation Model,
           Proceedings of the 20th Arctic and Marine Oil Spill Program,
           Vancouver, CA,
           Vol. 1, pp. 43-62

   Generate distillation cut temperatures from the oil's API.


.. py:function:: fmasses_from_cuts(f_evap_i)

   Generate distillation cut fractional masses from the
   cumulative distillation fractions in the cut data.


.. py:function:: fmasses_flat_dist(f_res, f_asph, N=5)

   Generate a flat distribution of N distillation cut fractional masses.


.. py:function:: saturate_mol_wt(boiling_point)

   Source: Dr. M. R. Riazi,
           Characterization and Properties of Petroleum Fractions
           eq. 2.48 and table 2.6

   Note: for this to actually work in every case, we need to limit
         our temperature to:
         - T_i < 1070.0
         - T_i >
         - T_i > 1070.0 - exp(6.98291)  (roughly about == -8.06)


.. py:function:: aromatic_mol_wt(boiling_point)

   Source: Dr. M. R. Riazi,
           Characterization and Properties of Petroleum Fractions
           eq. 2.48 and table 2.6

   Note: for this to actually work in every case, we need to limit
         our temperature to:
         - T_i < 1015.0
         - T_i > 1015.0 - exp(6.911)  (roughly about == 11.76)


.. py:function:: resin_mol_wt(_boiling_point)

   Source: Recommendation from Bill Lehr

   Note: We pass in a boiling point to remain consistent with the other
         molecular weight functions, even though it is not used.
   Note: We return a scalar in all cases.  This should still work with
         numpy array operations, but probably not with regular Python
         sequence types.
         We can fix this if the need arises.


.. py:function:: asphaltene_mol_wt(_boiling_point)

   Source: Recommendation from Bill Lehr

   Note: We pass in a boiling point to remain consistent with the other
         molecular weight functions, even though it is not used.
   Note: We return a scalar in all cases.  This should still work with
         numpy array operations, but probably not with regular Python
         sequence types.
         We can fix this if the need arises.


.. py:function:: trial_densities(boiling_points, watson_factor)

   Source: Dr. M. R. Riazi,
           Characterization and Properties of Petroleum Fractions
           eq. 2.13 and table 9.6

   Generate an initial estimate of volatile oil components based
   on boiling points and the Watson Characterization Factor.
   This is only good for estimating Aromatics & Saturates.


.. py:function:: saturate_densities(boiling_points)


.. py:function:: aromatic_densities(boiling_points)


.. py:function:: resin_densities(_boiling_points)

   Note: We pass in a boiling point to remain consistent with the other
         molecular weight functions, even though it is not used.
   Note: We return a scalar in all cases.  This should still work with
         numpy array operations, but probably not with regular Python
         sequence types.
         We can fix this if the need arises.


.. py:function:: asphaltene_densities(_boiling_points)

   Note: We pass in a boiling point to remain consistent with the other
         molecular weight functions, even though it is not used.
   Note: We return a scalar in all cases.  This should still work with
         numpy array operations, but probably not with regular Python
         sequence types.
         We can fix this if the need arises.


.. py:function:: _hydrocarbon_characterization_param(specific_gravity, temp_k)

   Source: Dr. M. R. Riazi,
           Characterization and Properties of Petroleum Fractions
           eq. 2.115

   Source: Huang, P. K. (1977),
           Characterization and Thermodynamic Correlations for
           Undefined Hydrocarbon Mixtures,
           Ph.D. Dissertation
           Pennsylvania State University,
           University Park, PA,

   This is a characterization parameter, designated as I, that
   was first used by Huang to correlate hydrocarbon properties


.. py:function:: refractive_index(hc_char_param)

   Source: Dr. M. R. Riazi,
           Characterization and Properties of Petroleum Fractions
           eq. 2.114

   This is the refractive index of liquid hydrocarbons at 20C,
   correlated through parameter I


.. py:function:: _hydrocarbon_grouping_param(mol_wt, specific_gravity, temp_k)

   Source: Dr. M. R. Riazi,
           Characterization and Properties of Petroleum Fractions
           eq. 3.50

   This is a hydrocarbon grouping parameter correlated through
   the molecular weight and the refractive index.  Riazi claims
   that it:
   - separates paraffins and aromatics
   - identifies various hydrocarbon types


.. py:function:: saturate_mass_fraction(fmass_i, mol_wt, specific_gravity, temp_k)

   Source: Dr. M. R. Riazi,
           Characterization and Properties of Petroleum Fractions
           eqs. 3.77 and 3.78

   For a petroleum hydrocarbon fraction in which the molecular
   weight, specific gravity, and boiling point are known, we can
   estimate the fraction of that substance which contains
   saturate compounds.
   When forming his equations, Riazi deals with the PNA composition,
   which essentially means Paraffins, Naphthenes, and Aromatics.
   And for our purposes, the saturates include the paraffins and
   naphthenes.


.. py:function:: oil_water_surface_tension_from_api(api)


.. py:function:: pour_point_from_kvis(ref_kvis, ref_temp_k)

   Source: Adios2

   If we have an oil kinematic viscosity at a reference temperature,
   then we can estimate what its pour point might be.


.. py:function:: pour_point_from_sg_mw_kvis(specific_gravity, mol_wt, kvis)

   Source: Dr. M. R. Riazi,
           Characterization and Properties of Petroleum Fractions
           eq. 3.119

   Another way of estimating pour point.
   These inputs may not be available for most imported oil records.


.. py:function:: flash_point_from_bp(temp_k)

   Source: Reference: Chang A., K. Pashakanti, and Y. Liu (2012),
                      Integrated Process Modeling and Optimization,
                      Wiley Verlag.



.. py:function:: flash_point_from_api(api)

   Source: Reference: Chang A., K. Pashakanti, and Y. Liu (2012),
                      Integrated Process Modeling and Optimization,
                      Wiley Verlag.



.. py:function:: bullwinkle_fraction_from_asph(f_asph)

   Source: Adios2


.. py:function:: bullwinkle_fraction_from_api(api)

   Source: Adios2



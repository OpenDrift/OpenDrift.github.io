:py:mod:`opendrift.models.openoil.adios.util.many_many`
=======================================================

.. py:module:: opendrift.models.openoil.adios.util.many_many

.. autoapi-nested-parse::

   ManyMany

   class for managing a many to many relationship in a pair of dicts

   The two mappings are "left" and "right"

   The left one is originally populated by the initializer.

   After that they are equivalent -- when you add something to one the other is updated.

   Currently there is no way to remove anything

   YOu can access copies of the mappings with:

   ``ManyMany.left``
   and
   ``ManyMany.right``

   They are copies, so that mutating them won't break the internal data.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.adios.util.many_many.ManyMany




.. py:class:: ManyMany(initial_data=None)

   
   initialize a ManyMany structure

   :param initial_data: initial data for the left dict. of the form:
                        {key1: iterable_of_values,
                         key2: iterable_of_values,
                         ...
                         }

   all values must be hashable

   .. py:method:: _rebuild_right()

      rebuilds the right dict to match the left


   .. py:method:: _rebuild_left()

      rebuilds the left dict to match the right


   .. py:method:: _rebuild(source)
      :staticmethod:

      builds a "reversed" dict from a source dict


   .. py:method:: _dict_hash(d)
      :staticmethod:

      Provide a hash of a dict with a sequence of hashable items as the values

      This was to be used to know if an internal dict was changed,
        but it turns out that's not useful (at least not in a robust way)


   .. py:method:: add_to_left(key, value)

      add a new value to the left dict

      :param key: the key the value is to be added to
      :param value: the value to be added

      If the key is already there, the value will be added to the corresponding set

      A new key and set will be created if it is not already there.


   .. py:method:: add_to_right(key, value)

      add a new value to the right dict

      :param key: the key the value is to be added to
      :param value: the value to be added

      If the key is already there, the value will be added to the corresponding set

      A new key and set will be created if it is not already there.


   .. py:method:: left()
      :property:

      A copy of the left dict

      It's a copy, so it won't change the internal ones if mutated


   .. py:method:: right()
      :property:

      A copy of the right dict

      It's a copy, so it won't change the internal ones if mutated




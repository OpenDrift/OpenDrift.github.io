:py:mod:`opendrift.models.openoil.adios.computation.gnome_oil`
==============================================================

.. py:module:: opendrift.models.openoil.adios.computation.gnome_oil

.. autoapi-nested-parse::

   Code for making a "GnomeOil" from an Oil Object

   See the PyGNOME code for more about GNOME's requirements

   NOTE: This make s JSON compatible Python structure from which to build
   a GnomeOil



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.adios.computation.gnome_oil.get_empty_dict
   opendrift.models.openoil.adios.computation.gnome_oil.make_gnome_oil
   opendrift.models.openoil.adios.computation.gnome_oil.estimate_pour_point
   opendrift.models.openoil.adios.computation.gnome_oil.estimate_flash_point
   opendrift.models.openoil.adios.computation.gnome_oil.component_temps
   opendrift.models.openoil.adios.computation.gnome_oil.component_types
   opendrift.models.openoil.adios.computation.gnome_oil.component_densities
   opendrift.models.openoil.adios.computation.gnome_oil.component_mol_wt
   opendrift.models.openoil.adios.computation.gnome_oil.inert_fractions
   opendrift.models.openoil.adios.computation.gnome_oil._linear_curve
   opendrift.models.openoil.adios.computation.gnome_oil.clamp
   opendrift.models.openoil.adios.computation.gnome_oil._inverse_linear_curve
   opendrift.models.openoil.adios.computation.gnome_oil.normalized_cut_values_adios
   opendrift.models.openoil.adios.computation.gnome_oil.normalized_cut_values
   opendrift.models.openoil.adios.computation.gnome_oil.normalized_cut_values_james
   opendrift.models.openoil.adios.computation.gnome_oil.component_mass_fractions
   opendrift.models.openoil.adios.computation.gnome_oil.sara_totals



Attributes
~~~~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.adios.computation.gnome_oil.logger


.. py:data:: logger

   

.. py:function:: get_empty_dict()

   This provides an empty dictionary with everything that is needed
   to generate a GNOME Oil


.. py:function:: make_gnome_oil(oil)

   Make a dict that a GnomeOil can be built from

   A GnomeOil needs:

             "name,
             "# Physical properties
             "api,
             "pour_point,
             "solubility,  # kg/m^3
             "# emulsification properties
             "bullwinkle_fraction,
             "bullwinkle_time,
             "emulsion_water_fraction_max,
             "densities,
             "density_ref_temps,
             "density_weathering,
             "kvis,
             "kvis_ref_temps,
             "kvis_weathering,
             "# PCs:
             "mass_fraction,
             "boiling_point,
             "molecular_weight,
             "component_density,
             "sara_type,
             "flash_point=None,
             "adios_oil_id=None,



.. py:function:: estimate_pour_point(oil)

   estimate pour point from kinematic viscosity



.. py:function:: estimate_flash_point(oil)

   estimate flash point from api or boiling point



.. py:function:: component_temps(cut_temps, N=10)

   component temps from boiling point



.. py:function:: component_types(cut_temps, N=10)

   set component SARA types



.. py:function:: component_densities(boiling_points)

   estimate component densities from boiling point



.. py:function:: component_mol_wt(boiling_points)

   estimate component molecular weight from boiling point



.. py:function:: inert_fractions(oil, density=None, viscosity=None)

   resins and asphaltenes from database or estimated if None



.. py:function:: _linear_curve(x, a, b)

   Here we describe the form of a linear function for the purpose of
   curve-fitting measured data points.


.. py:function:: clamp(x, M, zeta=0.03)

   We make use of a generalized logistic function or Richard's curve
   to generate a linear function that is clamped at x == M.
   We make use of a zeta value to tune the parameters nu, resulting in a
   smooth transition as we cross the M boundary.


.. py:function:: _inverse_linear_curve(y, a, b, M, zeta=0.12)


.. py:function:: normalized_cut_values_adios(oil)


.. py:function:: normalized_cut_values(oil)


.. py:function:: normalized_cut_values_james(oil, N=10)

   estimate cut temperatures



.. py:function:: component_mass_fractions(oil)

   estimate pseudocomponent mass fractions



.. py:function:: sara_totals(oil)

   get SARA from database
   estimate if no data




:py:mod:`opendrift.models.openoil.adios.models.common.validators`
=================================================================

.. py:module:: opendrift.models.openoil.adios.models.common.validators


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.adios.models.common.validators.EnumValidator
   opendrift.models.openoil.adios.models.common.validators.FloatRangeValidator
   opendrift.models.openoil.adios.models.common.validators.YearValidator




.. py:class:: EnumValidator(valid_items, err_msg, case_insensitive=False)

   validator for Enum values: a value that can only be one of a set


   :param valid_items: list of valid items -- can be anything that an `in`
                       test will work for.
   :param err_msg: The error message that should be used on failure.
                   Should be a format string that takes two parameters:
                   item and valid_items

   :param case_insensitive=False: whether you want the test to be
                                  case-insensitive.
                                  Only works for string values, of course.

   .. py:method:: __call__(self, item)



.. py:class:: FloatRangeValidator(min_value, max_value, err_msg=None)

   Validator for float values that can only be a given range

   range is inclusive (<= and >=)

   :param min: minimum value allowed

   :param max: maximum value allowed

   :param err_msg: The error message that should be used on failure.
                   Should be a format string that takes three parameters:
                   default is:
                       "ValidationError: {} is not between {} and {}"

   .. py:method:: __call__(self, value)



.. py:class:: YearValidator(min_year, max_year, err_msg=None)

   Validator for float values that can only be a given range

   range is inclusive (<= and >=)

   :param min: minimum year allowed

   :param max: maximum year allowed

   :param err_msg: The error message that should be used on failure.
                   Should be a format string that takes three parameters:
                   default is:
                       "ValidationError: {} is not between {} and {}"

   .. py:method:: __call__(self, value)




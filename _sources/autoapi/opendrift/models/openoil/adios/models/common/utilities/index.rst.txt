:py:mod:`opendrift.models.openoil.adios.models.common.utilities`
================================================================

.. py:module:: opendrift.models.openoil.adios.models.common.utilities

.. autoapi-nested-parse::

   Tools for helping make our data models.

   So far: making dataclasses read/writable as JSON



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.adios.models.common.utilities.JSON_List



Functions
~~~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.adios.models.common.utilities.something
   opendrift.models.openoil.adios.models.common.utilities.dataclass_to_json



.. py:function:: something(val)

   much like python's "Truthy" and Falsey", but we want some values
   to not be false like zero, for instance


.. py:function:: dataclass_to_json(cls)

   class decorator that adds the ability to save a dataclass as JSON

   All fields must be either JSON-able Python types or
   have be a type with a _to_json method


.. py:class:: JSON_List

   Bases: :py:obj:`list`

   just like a list, but with the ability to turn it into JSON

   A regular list can only be converted to JSON if it has
   JSON-able objects in it.

   Note: must be subclassed, and the item_type attribute set

   Initialize self.  See help(type(self)) for accurate signature.

   .. py:attribute:: item_type
      

      

   .. py:method:: py_json(sparse=True)


   .. py:method:: from_py_json(py_json, allow_none=False)
      :classmethod:

      create a JSON_List from json array of objects
      that may be json-able.


   .. py:method:: __repr__()

      Return repr(self).




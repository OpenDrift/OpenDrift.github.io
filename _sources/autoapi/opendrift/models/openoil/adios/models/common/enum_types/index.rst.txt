:py:mod:`opendrift.models.openoil.adios.models.common.enum_types`
=================================================================

.. py:module:: opendrift.models.openoil.adios.models.common.enum_types


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.adios.models.common.enum_types.ProductTypeEnum
   opendrift.models.openoil.adios.models.common.enum_types.SaraTypeEnum
   opendrift.models.openoil.adios.models.common.enum_types.ToxicityTypeEnum
   opendrift.models.openoil.adios.models.common.enum_types.VisualStabilityEnum
   opendrift.models.openoil.adios.models.common.enum_types.InterfaceTypeEnum




.. py:class:: ProductTypeEnum(*args, **kwds)

   Bases: :py:obj:`enum.Enum`

   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access::

   >>> Color.RED
   <Color.RED: 1>

   - value lookup:

   >>> Color(1)
   <Color.RED: 1>

   - name lookup:

   >>> Color['RED']
   <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.

   .. py:attribute:: crude
      :annotation: = crude

      

   .. py:attribute:: refined
      :annotation: = refined

      


.. py:class:: SaraTypeEnum(*args, **kwds)

   Bases: :py:obj:`enum.Enum`

   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access::

   >>> Color.RED
   <Color.RED: 1>

   - value lookup:

   >>> Color(1)
   <Color.RED: 1>

   - name lookup:

   >>> Color['RED']
   <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.

   .. py:attribute:: saturates
      :annotation: = Saturates

      

   .. py:attribute:: aromatics
      :annotation: = Aromatics

      

   .. py:attribute:: resins
      :annotation: = Resins

      

   .. py:attribute:: asphaltenes
      :annotation: = Asphaltenes

      


.. py:class:: ToxicityTypeEnum(*args, **kwds)

   Bases: :py:obj:`enum.Enum`

   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access::

   >>> Color.RED
   <Color.RED: 1>

   - value lookup:

   >>> Color(1)
   <Color.RED: 1>

   - name lookup:

   >>> Color['RED']
   <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.

   .. py:attribute:: ec
      :annotation: = EC

      

   .. py:attribute:: lc
      :annotation: = LC

      


.. py:class:: VisualStabilityEnum(*args, **kwds)

   Bases: :py:obj:`enum.Enum`

   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access::

   >>> Color.RED
   <Color.RED: 1>

   - value lookup:

   >>> Color(1)
   <Color.RED: 1>

   - name lookup:

   >>> Color['RED']
   <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.

   .. py:attribute:: entrained
      :annotation: = Entrained

      

   .. py:attribute:: did_not_form
      :annotation: = Did not form

      

   .. py:attribute:: unstable
      :annotation: = Unstable

      

   .. py:attribute:: stable
      :annotation: = Stable

      

   .. py:attribute:: meso_stable
      :annotation: = Meso-stable

      


.. py:class:: InterfaceTypeEnum(*args, **kwds)

   Bases: :py:obj:`enum.Enum`

   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access::

   >>> Color.RED
   <Color.RED: 1>

   - value lookup:

   >>> Color(1)
   <Color.RED: 1>

   - name lookup:

   >>> Color['RED']
   <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.

   .. py:attribute:: air
      :annotation: = air

      

   .. py:attribute:: water
      :annotation: = water

      

   .. py:attribute:: seawater
      :annotation: = seawater

      



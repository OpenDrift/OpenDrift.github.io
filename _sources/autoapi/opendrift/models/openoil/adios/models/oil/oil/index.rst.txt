:py:mod:`opendrift.models.openoil.adios.models.oil.oil`
=======================================================

.. py:module:: opendrift.models.openoil.adios.models.oil.oil

.. autoapi-nested-parse::

   Main class that represents an oil record.

   This maps to the JSON used in the DB

   Having a Python class makes it easier to write importing, validating etc, code.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.adios.models.oil.oil.Oil




Attributes
~~~~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.adios.models.oil.oil.ADIOS_DATA_MODEL_VERSION


.. py:data:: ADIOS_DATA_MODEL_VERSION
   

   

.. py:class:: Oil

   .. py:attribute:: oil_id
      :annotation: :str

      

   .. py:attribute:: adios_data_model_version
      :annotation: :opendrift.models.openoil.adios.models.oil.version.Version

      

   .. py:attribute:: metadata
      :annotation: :opendrift.models.openoil.adios.models.oil.metadata.MetaData

      

   .. py:attribute:: sub_samples
      :annotation: :opendrift.models.openoil.adios.models.oil.sample.SampleList

      

   .. py:attribute:: status
      :annotation: :list

      

   .. py:attribute:: permanent_warnings
      :annotation: :list

      

   .. py:attribute:: extra_data
      :annotation: :dict

      

   .. py:attribute:: review_status
      :annotation: :opendrift.models.openoil.adios.models.oil.review_status.ReviewStatus

      

   .. py:method:: __post_init__(self)

      Put any validation code here (__init__() is auto-generated by the
      dataclass decorator, and it will clobber any attempt to overload
      the __init__.)


   .. py:method:: __str__(self)

      need a custom str here, so we don't get a huge dump of the entire tree
      of data


   .. py:method:: _pre_from_py_json(py_json)
      :staticmethod:


   .. py:method:: from_file(cls, infile)
      :classmethod:

      load an Oil object from the passed in JSON file

      it can be either a path or an open file object

      NOTE: this could be in the decorator -- but we only really need it
            for a full record.


   .. py:method:: _validate_id(id)
      :staticmethod:


   .. py:method:: validate(self)

      validation specific to the Oil object itself

      validation of sub-objects is automatically applied


   .. py:method:: reset_validation(self)

      calls the validate method, and updates the status with the result


   .. py:method:: to_file(self, outfile, sparse=True)

      save an Oil object as JSON to the passed in file

      it can be either a path or a writable open file object

      NOTE: this could be in the decorator -- but we only really need it
            for a full record.




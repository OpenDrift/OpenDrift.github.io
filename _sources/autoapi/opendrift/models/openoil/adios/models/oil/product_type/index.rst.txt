:py:mod:`opendrift.models.openoil.adios.models.oil.product_type`
================================================================

.. py:module:: opendrift.models.openoil.adios.models.oil.product_type

.. autoapi-nested-parse::

   Class that represents the product type

   With validation

   Also maintains the products types and labels mapping



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.adios.models.oil.product_type.TypeLabelsMap
   opendrift.models.openoil.adios.models.oil.product_type.ProductType



Functions
~~~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.adios.models.oil.product_type.load_from_csv_file



Attributes
~~~~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.adios.models.oil.product_type.PRODUCT_TYPE_LABEL_MAPPING
   opendrift.models.openoil.adios.models.oil.product_type.PRODUCT_TYPES
   opendrift.models.openoil.adios.models.oil.product_type.types_to_labels
   opendrift.models.openoil.adios.models.oil.product_type.DOESNT_NEED_API


.. py:class:: TypeLabelsMap(initial_data=None)


   Bases: :py:obj:`opendrift.models.openoil.adios.util.many_many.ManyMany`

   class to maintain a many to many relationship between product types and labels

   The ``.product_types`` attribute is a mapping with the labels as keys,
   and product types as values.

   The ``.labels`` attribute is a mapping with the product type as keys,
   and the associated labels as values.

   initialize a ManyMany structure

   :param initial_data: initial data for the left dict. of the form:
                        {key1: iterable_of_values,
                         key2: iterable_of_values,
                         ...
                         }

   all values must be hashable

   .. py:attribute:: product_types

      

   .. py:attribute:: labels

      


.. py:function:: load_from_csv_file(filepath=None)

   Loads the product types and labels mapping from a CSV file

   :param filepath=None: The name of the file to load from. If not
                         provided, it will look for:
                         "product_types_and_labels.csv" next to this module



.. py:data:: PRODUCT_TYPE_LABEL_MAPPING

   

.. py:data:: PRODUCT_TYPES

   

.. py:data:: types_to_labels

   

.. py:data:: DOESNT_NEED_API

   

.. py:class:: ProductType


   Bases: :py:obj:`str`

   str(object='') -> str
   str(bytes_or_buffer[, encoding[, errors]]) -> str

   Create a new string object from the given object. If encoding or
   errors is specified, then the object must expose a data buffer
   that will be decoded using the given encoding and error handler.
   Otherwise, returns the result of object.__str__() (if defined)
   or repr(object).
   encoding defaults to sys.getdefaultencoding().
   errors defaults to 'strict'.

   Initialize self.  See help(type(self)) for accurate signature.

   .. py:attribute:: _valid_types

      

   .. py:attribute:: _validator

      

   .. py:method:: validate(value)
      :classmethod:




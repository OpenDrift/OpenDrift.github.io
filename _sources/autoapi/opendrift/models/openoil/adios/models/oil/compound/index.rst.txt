:py:mod:`opendrift.models.openoil.adios.models.oil.compound`
============================================================

.. py:module:: opendrift.models.openoil.adios.models.oil.compound

.. autoapi-nested-parse::

   dataclass to store the compounds



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.adios.models.oil.compound.Compound
   opendrift.models.openoil.adios.models.oil.compound.CompoundList




.. py:class:: Compound

   Some compounds that will be handled by this dataclass:
   - sulfur_mass_fraction: MassFraction = None
   - carbon_mass_fraction: MassFraction = None
   - hydrogen_mass_fraction: MassFraction = None
   - mercaptan_sulfur_mass_fraction: MassFraction = None
   - nitrogen_mass_fraction: MassFraction = None
   - ccr_percent: MassFraction = None  # conradson carbon residue
   - calcium_mass_fraction: MassFraction = None
   - hydrogen_sulfide_concentration: MassFraction = None
   - salt_content: MassFraction = None
   - paraffin_volume_fraction: MassFraction = None
   - naphthene_volume_fraction: MassFraction = None
   - aromatic_volume_fraction: MassFraction = None

   .. py:attribute:: name
      :annotation: :str = 

      

   .. py:attribute:: groups
      :annotation: :list

      

   .. py:attribute:: method
      :annotation: :str = 

      

   .. py:attribute:: measurement
      :annotation: :opendrift.models.openoil.adios.models.common.measurement.MassFraction

      

   .. py:attribute:: comment
      :annotation: :str = 

      


.. py:class:: CompoundList

   Bases: :py:obj:`opendrift.models.openoil.adios.models.common.utilities.JSON_List`

   just like a list, but with the ability to turn it into JSON

   A regular list can only be converted to JSON if it has
   JSON-able objects in it.

   Note: must be subclassed, and the item_type attribute set

   Initialize self.  See help(type(self)) for accurate signature.

   .. py:attribute:: item_type
      

      



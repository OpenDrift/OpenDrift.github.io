:mod:`opendrift.models.openoil`
===============================

.. py:module:: opendrift.models.openoil

.. autoapi-nested-parse::

   OpenOil is a 3D oil drift module bundled within the OpenDrift framework.

   The oil weathering calculations is based on the NOAA-ERR-ERD OilLibrary package, which is installed as a dependency. The code for evaporation and emulsification in OpenOil is borrowed from the NOAA PyGnome code, and adapted to the OpenDrift architecture.

   Example of ship leaking oil along the coast of Northern Norway
   ##############################################################
   .. image:: https://dl.dropboxusercontent.com/s/ty6dmqf0oohewky/oilspill_tromsoe.gif?dl=0

   Simulation of Deepwater Horizon (Macondo) accident, initiated from satellite images
   ###################################################################################
   .. image:: https://dl.dropboxusercontent.com/s/ghi7crtmwpyjgto/macondo_simulation.gif?dl=0
   Satellite images provided by Prof. Chuanmin Hu, and ocean model output provided by Prof. Vassiliki Kourafalou

   Example oil budget for a simulation
   ###################################
   .. image:: https://dl.dropboxusercontent.com/s/pb0h6tlev9pnoh3/oil_budget_draugen.png?dl=0

   Oil properties affecting the drift
   ***********************************
   The vertical (and thus indirectly also the horisontal) motion of oil (droplets) is affected by oil density and droplet diameters.

   When using the NOAA oil weathering model (``o = OpenOil(weathering_model='noaa')``), which is the default, the density is obtained from the NOAA database according to the oiltype selected when seeding. This value can not be overridden by the user, and it will also change during the simulation due to oil weathering processes (evaporation and emulsification). When using the alternative (primitive) weathering model (o = OpenOil(weathering_model='basic')), the parameter 'density' may be set when seeding (default is 880 kg/m3).

   The droplet diameter may be given explicitly when seeding, e.g.::

       o.seed_elements(4, 60, number=100, time=datetime.now(), diameter=1e-5)

   In this case, the diameter will not change during the simulation, which is useful e.g. for sensitivity tests. The same diameter will be used for all elements for this example, but an array of the same length as the number of elements may also be provided.

   If a constant droplet diameter is not given by the user, it will be chosen randomly within given config limits for a subsea spill ('blowout'), and modified after any later wave breaking event. Oil droplets seeded under sea surface (z<0) will be assigned initial diameters between the following limits, typical for a subsea blowout (Johansen, 2000)::

       o.set_config('input:spill:droplet_diameter_min_subsea', 0.0005)  # 0.5 mm
       o.set_config('input:spill:droplet_diameter_max_subsea', 0.005)   # 5 mm

   After each wave breaking event, a new droplet diameter will be chosen based on the config setting for droplet size distribution.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.Oil
   opendrift.models.openoil.OpenOil



.. data:: basestring
   

   

.. py:class:: Oil(**kwargs)

   Bases: :class:`opendrift.elements.LagrangianArray`

   Extending LagrangianArray with variables relevant for oil particles.

   .. attribute:: variables
      

      


.. py:class:: OpenOil(weathering_model='noaa', *args, **kwargs)

   Bases: :class:`opendrift.models.oceandrift.OceanDrift`

   Open source oil trajectory model based on the OpenDrift framework.

   Developed at MET Norway based on oil weathering parameterisations
   found in open/published litterature.

   Under construction.

   .. attribute:: ElementType
      

      

   .. attribute:: required_variables
      :annotation: = ['x_sea_water_velocity', 'y_sea_water_velocity', 'upward_sea_water_velocity', 'sea_surface_wave_significant_height', 'sea_surface_wave_stokes_drift_x_velocity', 'sea_surface_wave_stokes_drift_y_velocity', 'sea_surface_wave_period_at_variance_spectral_density_maximum', 'sea_surface_wave_mean_period_from_variance_spectral_density_second_frequency_moment', 'sea_ice_area_fraction', 'sea_ice_x_velocity', 'sea_ice_y_velocity', 'sea_water_temperature', 'sea_water_salinity', 'sea_floor_depth_below_sea_level', 'x_wind', 'y_wind', 'ocean_vertical_diffusivity', 'land_binary_mask']

      

   .. attribute:: desired_variables
      :annotation: = ['sea_surface_wave_significant_height', 'sea_surface_wave_stokes_drift_x_velocity', 'sea_surface_wave_stokes_drift_y_velocity', 'sea_surface_wave_period_at_variance_spectral_density_maximum', 'sea_surface_wave_mean_period_from_variance_spectral_density_second_frequency_moment', 'sea_ice_area_fraction', 'sea_ice_x_velocity', 'sea_ice_y_velocity', 'ocean_vertical_diffusivity', 'upward_sea_water_velocity']

      

   .. attribute:: fallback_values
      

      

   .. attribute:: required_profiles
      :annotation: = ['sea_water_temperature', 'sea_water_salinity', 'ocean_vertical_diffusivity']

      

   .. attribute:: required_profiles_z_range
      

      

   .. attribute:: max_speed
      :annotation: = 1.3

      

   .. attribute:: status_colors
      

      

   .. attribute:: duplicate_oils
      :annotation: = ['ALVHEIM BLEND, STATOIL', 'DRAUGEN, STATOIL', 'EKOFISK BLEND 2000', 'EKOFISK BLEND, STATOIL', 'EKOFISK, CITGO', 'EKOFISK, EXXON', 'EKOFISK, PHILLIPS', 'EKOFISK, STATOIL', 'ELDFISK', 'ELDFISK B', 'GLITNE, STATOIL', 'GOLIAT BLEND, STATOIL', 'GRANE BLEND, STATOIL', 'GUDRUN BLEND, STATOIL', 'GULLFAKS A, STATOIL', 'GULLFAKS C, STATOIL', 'GULLFAKS, SHELL OIL', 'GULLFAKS SOR', 'GULLFAKS, STATOIL', 'HEIDRUN, STATOIL', 'NJORD, STATOIL', 'NORNE, STATOIL', 'OSEBERG BLEND, STATOIL', 'OSEBERG EXXON', 'OSEBERG, PHILLIPS', 'OSEBERG, SHELL OIL', 'SLEIPNER CONDENSATE, STATOIL', 'STATFJORD BLEND, STATOIL', 'VARG, STATOIL']

      

   .. attribute:: max_water_fraction
      

      

   .. attribute:: oil_types
      

      

   .. attribute:: default_oil
      

      

   .. attribute:: configspec
      

      

   .. method:: update_surface_oilfilm_thickness(self)


      The mass of oil is summed within a grid of 100x100
      cells covering the oil at a given time. Each oil particle
      within each cell is given a film thickness as the amount of
      oil divided by the cell area.


   .. method:: evaporate(self)



   .. method:: emulsification(self)



   .. method:: biodegradation(self)



   .. method:: disperse(self)



   .. method:: oil_weathering(self)



   .. method:: oil_weathering_basic(self)



   .. method:: prepare_run(self)



   .. method:: oil_weathering_noaa(self)


      Oil weathering scheme adopted from NOAA PyGNOME model:
      https://github.com/NOAA-ORR-ERD/PyGnome


   .. method:: disperse_noaa(self)



   .. method:: plot_droplet_spectrum(self)


      Plotting distribution of droplet radii, for debugging


   .. method:: evaporation_noaa(self)



   .. method:: emulsification_noaa(self)



   .. method:: update_terminal_velocity(self, Tprofiles=None, Sprofiles=None, z_index=None)


      Calculate terminal velocity for oil droplets

      according to
      Tkalich et al. (2002): Vertical mixing of oil droplets
                             by breaking waves
      Marine Pollution Bulletin 44, 1219-1229

      If profiles of temperature and salt are passed into this function,
      they will be interpolated from the profiles.
      if not, T,S will be fetched from reader.


   .. method:: oil_wave_entrainment_rate(self)



   .. method:: prepare_vertical_mixing(self)


      Calculate entrainment probability before main loop


   .. method:: surface_wave_mixing(self, time_step_seconds)


      Mix surface oil into water column.


   .. method:: surface_stick(self)


      set surfaced particles to exactly zero depth to let them form a slick 


   .. method:: get_wave_breaking_droplet_diameter(self)



   .. method:: get_wave_breaking_droplet_diameter_liz2017(self)



   .. method:: get_wave_breaking_droplet_diameter_johansen2015(self)



   .. method:: resurface_elements(self, minimum_depth=None)


      Oil elements reaching surface (or above) form slick, not droplet


   .. method:: advect_oil(self)



   .. method:: update(self)


      Update positions and properties of oil particles.


   .. method:: get_oil_budget(self)


      Get oil budget for the current simulation

      The oil budget consists of the following categories:

      * surface: the sum of variable mass_oil for all active elements where z = 0
      * submerged: the sum of variable mass_oil for all active elements where z < 0
      * stranded: the sum of variable mass_oil for all elements which are stranded
      * evaporated: the sum of variable mass_evaporated for all elements
      * dispersed: the sum of variable mass_dispersed for all elements

      The sum (total mass) shall equal the mass released. Note that the mass of oil
      is conserved, whereas the volume may change with changes in density and
      water uptake (emulsification). Therefore mass should be used for budgets,
      eventually converted to volume (by dividing on density) in the final step
      before presentation.

      Note that mass_oil is the mass of pure oil. The mass of oil emulsion
      (oil containing entrained water droplets) can be calculated as:
          mass_emulsion = mass_oil / (1 - water_fraction)
      I.e. water_fraction = 0 means pure oil, water_fraction = 0.5 means mixture of
      50% oil and 50% water, and water_fraction = 0.9 (which is maximum)
      means 10% oil and 90% water.


   .. method:: plot_oil_budget(self, filename=None, ax=None, show_density_viscosity=True, show_wind_and_current=True)



   .. method:: get_oil_name(self)



   .. method:: cumulative_oil_entrainment_fraction(self)


      Returns the fraction of oil elements which has been entrained vs time


   .. method:: plot_oil_density_and_viscosity(self, ax=None, show=True)



   .. method:: set_oiltype(self, oiltype)



   .. method:: seed_elements(self, *args, **kwargs)


      Seed a given number of particles around given position(s).

      Arguments:
          lon: scalar or array, central longitude(s).
          lat: scalar or array, central latitude(s).
          radius: scalar or array, radius in meters around each lon-lat
          pair, within which particles will be randomly seeded.

          number: integer, total number of particles to be seeded
          Elements are spread equally among the given lon/lat points.
          Default is one particle for each lon-lat pair.

          time: datenum, the time at which particles are seeded/released.
          If time is an array with two elements, elements are seeded
          continously from start/first to end/last time.

          cone: boolean or integer. If True, lon and lat must be two element
          arrays, interpreted as the start and end position of a cone
          within which elements will be seeded. Radius may also be a
          two element array specifying the radius around the points.

          radius_type: string
          If 'gaussian' (default), the radius is the standard deviation in
          x-y-directions. If 'uniform', elements are spread evenly and
          always inside a circle with the given radius.

          kwargs: keyword arguments containing properties/attributes and
          values corresponding to the actual particle type (ElementType).
          These are forwarded to the ElementType class. All properties
          for which there are no default value must be specified.


   .. method:: seed_from_gml(self, gmlfile, num_elements=1000, *args, **kwargs)


      Read oil slick contours from GML file, and seed particles within.


   .. method:: seed_from_geotiff_thickness(self, filename, number=50000, *args, **kwargs)


      Seed from files as provided by Prof. Chuanmin Hu


   .. method:: _substance_name(self)





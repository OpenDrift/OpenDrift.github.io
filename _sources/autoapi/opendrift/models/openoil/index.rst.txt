:mod:`opendrift.models.openoil`
===============================

.. py:module:: opendrift.models.openoil

.. autoapi-nested-parse::

   OpenOil is an oil drift module bundled within the OpenDrift framework. There is both a 2D-version, and 3D-version which adds turbulent vertical mixing.

   The oil weathering calculations is based on the NOAA-ERR-ERD OilLibrary package, which must be installed as a dependency. The code for evaporation and emulsification in OpenOil is borrowed from the NOAA PyGnome code, and adapted to the OpenDrift architecture.

   Example of ship leaking oil along the coast of Northern Norway
   ##############################################################
   .. image:: https://dl.dropboxusercontent.com/s/ty6dmqf0oohewky/oilspill_tromsoe.gif?dl=0

   Simulation of Deepwater Horizon (Macondo) accident, initiated from satellite images
   ###################################################################################
   .. image:: https://dl.dropboxusercontent.com/s/ghi7crtmwpyjgto/macondo_simulation.gif?dl=0
   Satellite images provided by Prof. Chuanmin Hu, and ocean model output provided by Prof. Vassiliki Kourafalou

   Example oil budget for a simulation
   ###################################
   .. image:: https://dl.dropboxusercontent.com/s/pb0h6tlev9pnoh3/oil_budget_draugen.png?dl=0

   Oil properties affecting the drift
   ***********************************
   The vertical (and thus indirectly also the horisontal) motion of oil (droplets) is affected by oil density and droplet diameters.

   When using the NOAA oil weathering model (``o = OpenOil3D(weathering_model='noaa')``), the density is obtained from the NOAA database according to the oiltype selected when seeding. This value can not be overridden by the user, and it will also change during the simulation due to oil weathering processes (evaporation and emulsification). When using the default (primitive) weathering model (o = OpenOil3D()), the parameter 'density' may be set when seeding (default is 880 kg/m3).

   The droplet diameter may be given explicitly when seeding, e.g.::

       o.seed_elements(4, 60, number=100, time=datetime.now(), diameter=1e-5)

   In this case, the diameter will not change during the simulation, which is useful e.g. for sensitivity tests. The same diameter will be used for all elements for this example, but an array of the same length as the number of elements may also be provided.

   If a constant droplet diameter is not given by the user, it will be chosen randomly within given config limits for a subsea spill ('blowout'), and modified after any later wave breaking event. Oil droplets seeded under sea surface (z<0) will be assigned initial diameters between the following limits, typical for a subsea blowout (Johansen, 2000)::

       o.config['input']['spill']['droplet_diameter_min_subsea'] = 0.0005  # 0.5 mm
       o.config['input']['spill']['droplet_diameter_max_subsea'] = 0.005   # 5 mm

   After each wave breaking event, a new diameter will be chosen between configurable limits and exponent::

       o.config['turbulentmixing']['droplet_diameter_min_wavebreaking'] = 1e-5
       o.config['turbulentmixing']['droplet_diameter_max_wavebreaking'] = 1e-3
       o.config['turbulentmixing']['droplet_size_exponent] = 0

   In this case a logarithmic distribution is used, with N ~ diameter^s, where s is the droplet_size_exponent. A droplet_size_exponent of 0 (default) gives uniform distribution. A value of -2.3 corresponds to the empirical number distribution as found by Delvigne and Sweeney, and 0.7 gives the corresponding volume distribution (number distribution multiplied by diameter3, since volume is proportinal to diameter3).

   The droplet size limits could also have been calculated dynamically from oil viscosity, but this is not yet implemented. The limits above should eventually be adjusted before the time of seeding.



Module Contents
---------------


.. py:class:: Oil(**kwargs)

   Bases: :class:`opendrift.elements.LagrangianArray`

   Extending LagrangianArray with variables relevant for oil particles.

   .. attribute:: variables
      

      


.. py:class:: OpenOil(weathering_model='default', *args, **kwargs)

   Bases: :class:`opendrift.models.basemodel.OpenDriftSimulation`

   Open source oil trajectory model based on the OpenDrift framework.

   Developed at MET Norway based on oil weathering parameterisations
   found in open/published litterature.

   Under construction.

   .. attribute:: ElementType
      

      

   .. attribute:: required_variables
      :annotation: = ['x_sea_water_velocity', 'y_sea_water_velocity', 'sea_surface_wave_significant_height', 'sea_surface_wave_stokes_drift_x_velocity', 'sea_surface_wave_stokes_drift_y_velocity', 'sea_ice_area_fraction', 'sea_water_temperature', 'sea_floor_depth_below_sea_level', 'x_wind', 'y_wind', 'land_binary_mask']

      

   .. attribute:: fallback_values
      

      

   .. attribute:: status_colors
      

      

   .. attribute:: configspec
      :annotation: = 
           [processes]
               dispersion = boolean(default=True)
               evaporation = boolean(default=True)
               emulsification = boolean(default=True)
               biodegradation = boolean(default=False)
               update_oilfilm_thickness = boolean(default=False)
           [drift]
               current_uncertainty = float(min=0, max=5, default=0.05)
               wind_uncertainty = float(min=0, max=5, default=.5)
       

      

   .. attribute:: duplicate_oils
      :annotation: = ['ALVHEIM BLEND, STATOIL', 'DRAUGEN, STATOIL', 'EKOFISK BLEND 2000', 'EKOFISK BLEND, STATOIL', 'EKOFISK, CITGO', 'EKOFISK, EXXON', 'EKOFISK, PHILLIPS', 'EKOFISK, STATOIL', 'ELDFISK', 'ELDFISK B', 'GLITNE, STATOIL', 'GOLIAT BLEND, STATOIL', 'GRANE BLEND, STATOIL', 'GUDRUN BLEND, STATOIL', 'GULLFAKS A, STATOIL', 'GULLFAKS C, STATOIL', 'GULLFAKS, SHELL OIL', 'GULLFAKS SOR', 'GULLFAKS, STATOIL', 'HEIDRUN, STATOIL', 'NJORD, STATOIL', 'NORNE, STATOIL', 'OSEBERG BLEND, STATOIL', 'OSEBERG EXXON', 'OSEBERG, PHILLIPS', 'OSEBERG, SHELL OIL', 'SLEIPNER CONDENSATE, STATOIL', 'STATFJORD BLEND, STATOIL', 'VARG, STATOIL']

      

   .. attribute:: max_water_fraction
      

      

   .. method:: update_surface_oilfilm_thickness(self)


      The mass of oil is summed within a grid of 20x20
      cells covering the oil at a given time. Each oil particle
      within each cell is given a film thickness as the amount of
      oil divided by the cell area.


   .. method:: evaporate(self)



   .. method:: emulsification(self)



   .. method:: biodegradation(self)



   .. method:: disperse(self)



   .. method:: oil_weathering(self)



   .. method:: oil_weathering_default(self)



   .. method:: prepare_run(self)



   .. method:: oil_weathering_noaa(self)


      Oil weathering scheme adopted from NOAA PyGNOME model:
      https://github.com/NOAA-ORR-ERD/PyGnome


   .. method:: disperse_noaa(self)



   .. method:: plot_droplet_spectrum(self)


      Plotting distribution of droplet radii, for debugging


   .. method:: evaporation_noaa(self)



   .. method:: emulsification_noaa(self)



   .. method:: advect_oil(self)



   .. method:: update(self)


      Update positions and properties of oil particles.


   .. method:: get_oil_budget(self)


      Get oil budget for the current simulation

      The oil budget consists of the following categories:

      * surface: the sum of variable mass_oil for all active elements where z = 0
      * submerged: the sum of variable mass_oil for all active elements where z < 0
      * stranded: the sum of variable mass_oil for all elements which are stranded
      * evaporated: the sum of variable mass_evaporated for all elements
      * dispersed: the sum of variable mass_dispersed for all elements

      The sum (total mass) shall equal the mass released. Note that the mass of oil
      is conserved, whereas the volume may change with changes in density and
      water uptake (emulsification). Therefore mass should be used for budgets,
      eventually converted to volume (by dividing on density) in the final step
      before presentation.

      Note that mass_oil is the mass of pure oil. The mass of oil emulsion
      (oil containing entrained water droplets) can be calculated as:
          mass_emulsion = mass_oil / (1 - water_fraction)
      I.e. water_fraction = 0 means pure oil, water_fraction = 0.5 means mixture of
      50% oil and 50% water, and water_fraction = 0.9 (which is maximum)
      means 10% oil and 90% water.


   .. method:: plot_oil_budget(self, filename=None, ax=None, show_density_viscosity=True, show_wind_and_waves=True)



   .. method:: plot_oil_density_and_viscosity(self, ax=None, show=True)



   .. method:: set_oiltype(self, oiltype)



   .. method:: seed_elements(self, *args, **kwargs)



   .. method:: seed_from_gml(self, gmlfile, num_elements=1000, *args, **kwargs)


      Read oil slick contours from GML file, and seed particles within.


   .. method:: seed_from_geotiff_thickness(self, filename, number=50000, *args, **kwargs)


      Seed from files as provided by Prof. Chuanmin Hu




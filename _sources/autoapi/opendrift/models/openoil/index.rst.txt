:py:mod:`opendrift.models.openoil`
==================================

.. py:module:: opendrift.models.openoil


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   adios/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   noaa_oil_weathering/index.rst
   openoil/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.OceanDrift
   opendrift.models.openoil.Lagrangian3DArray
   opendrift.models.openoil.Oil
   opendrift.models.openoil.OpenOil



Functions
~~~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.oil_wave_entrainment_rate_li2017



Attributes
~~~~~~~~~~

.. autoapisummary::

   opendrift.models.openoil.logger


.. py:data:: logger
   

   

.. py:class:: OceanDrift(*args, **kwargs)

   Bases: :py:obj:`opendrift.models.basemodel.OpenDriftSimulation`

   Open source buoyant particle trajectory model based on OpenDrift.

   Developed at MET Norway

   Generic module for particles that move in 3 dimensions
   and may be to vertical turbulent mixing
   with the possibility for positive or negative buoyancy

   Particles could be e.g. oil droplets, plankton, nutrients or sediments,
   Model may be subclassed for more specific behaviour.


   Initialise OpenDriftSimulation

   Args:
       seed: integer or None. A given integer will yield identical
           random numbers drawn each simulation. Random numbers are
           e.g. used to distribute particles spatially when seeding,
           and may be used by modules (subclasses) for e.g. diffusion.
           Specifying a fixed value (default: 0) is useful for sensitivity
           tests. With seed = None, different random numbers will be drawn
           for subsequent runs, even with identical configuration/input.
       iomodule: name of module used to export data
           default: netcdf, see :py:mod:`opendrift.io` for more alternatives.
           `iomodule` is module/filename without preceeding `io_`
       loglevel: set to 0 (default) to retrieve all debug information.
           Provide a higher value (e.g. 20) to receive less output.
           Use the string 'custom' to configure logging from outside.
       logtime: if True, a time stamp is given for each logging line.
                logtime can also be given as a python time specifier
                (e.g. '%H:%M:%S')

   .. py:attribute:: ElementType
      

      

   .. py:attribute:: max_speed
      :annotation: = 1

      

   .. py:attribute:: required_variables
      

      

   .. py:attribute:: required_profiles_z_range
      

      

   .. py:method:: update(self)

      Update positions and properties of elements.


   .. py:method:: wind_drift_factor_from_trajectory_lw(self, lon, lat, time, wind_drift_factors, simulation_length, simulation_interval)

      Perform simulations and use skillscore to optimize wind_drift_factor


   .. py:method:: machine_learning_correction(self)


   .. py:method:: disable_vertical_motion(self)

      Deactivate any vertical processes/advection


   .. py:method:: update_terminal_velocity(self, Tprofiles=None, Sprofiles=None, z_index=None)

      Calculate terminal velocity due to bouyancy from own properties
      and environmental variables. Sub-modules should overload
      this method for particle-specific behaviour


   .. py:method:: prepare_vertical_mixing(self)


   .. py:method:: vertical_advection(self)

      Move particles vertically according to vertical ocean current

      Vertical advection by ocean currents is normally small
      compared to termical velocity


   .. py:method:: vertical_buoyancy(self)

      Move particles vertically according to their buoyancy


   .. py:method:: surface_stick(self)

      To be overloaded by subclasses, e.g. downward mixing of oil


   .. py:method:: bottom_interaction(self, Zmin=None)

      To be overloaded by subclasses, e.g. radionuclides in sediments


   .. py:method:: surface_wave_mixing(self, time_step_seconds)

      To be overloaded by subclasses, e.g. downward mixing of oil


   .. py:method:: get_diffusivity_profile(self, model)


   .. py:method:: vertical_mixing(self, store_depths=False)

      Mix particles vertically according to eddy diffusivity and buoyancy

      Buoyancy is expressed as terminal velocity, which is the
      steady-state vertical velocity due to positive or negative
      buoyant behaviour. It is usually a function of particle density,
      diameter, and shape.

      Vertical particle displacemend du to turbulent mixing is
      calculated using a random walk scheme" (Visser et al. 1996)


   .. py:method:: animate_vertical_distribution(self, depths=None, maxdepth=None, bins=50, filename=None, subsamplingstep=1)

      Function to animate vertical distribution of particles
      bins:            number of bins in the histogram
      maxdepth:        maximum depth
      subsamplingstep: speed-up the generation of the animation reducing the number of output frames
      fasterwriter:    speed-up the writing to outpute file


   .. py:method:: plot_vertical_distribution(self, maxdepth=None, bins=None, maxnum=None)

      Function to plot vertical distribution of particles

      maxdepth: maximum depth considered for the profile
      bins:     number of bins between surface and maxdepth
      maxnum:   range of bars in histogram is [0,maxnum]


   .. py:method:: plotter_vertical_distribution_time(self, ax=None, mask=None, dz=1.0, maxrange=-100, bins=None, step=1)

      Function to plot vertical distribution of particles.

      Use mask to plot any selection of particles.



.. py:class:: Lagrangian3DArray(**kwargs)

   Bases: :py:obj:`opendrift.elements.LagrangianArray`

   Extending LagrangianArray for elements moving in 3 dimensions
   The Particle may be buoyant and/or subject to vertical mixing
   buoyant bahaviour is described by terminal velocity

   Initialises a LagrangianArray with given properties.

   Args:
       Keyword arguments (kwargs) with names corresponding to the
       OrderedDict 'variables' of the class, and corresponding values.
       The values must be ndarrays of equal length, or scalars.
       All (or none) variables must be given, unless a default value
       is specified in the OrderedDict 'variables'
       An empty object may be created by giving no input.

   .. py:attribute:: variables
      

      


.. py:function:: oil_wave_entrainment_rate_li2017(dynamic_viscosity, oil_density, interfacial_tension, significant_wave_height=None, wave_breaking_fraction=None, wind_speed=None, sea_water_density=1028.0)


.. py:class:: Oil(**kwargs)

   Bases: :py:obj:`opendrift.models.oceandrift.Lagrangian3DArray`

   Extending LagrangianArray with variables relevant for oil particles.

   Initialises a LagrangianArray with given properties.

   Args:
       Keyword arguments (kwargs) with names corresponding to the
       OrderedDict 'variables' of the class, and corresponding values.
       The values must be ndarrays of equal length, or scalars.
       All (or none) variables must be given, unless a default value
       is specified in the OrderedDict 'variables'
       An empty object may be created by giving no input.

   .. py:attribute:: variables
      

      


.. py:class:: OpenOil(weathering_model='noaa', *args, **kwargs)

   Bases: :py:obj:`opendrift.models.oceandrift.OceanDrift`

   Open source oil trajectory model based on the OpenDrift framework.

   Developed at MET Norway based on oil weathering parameterisations
   found in open/published litterature.

   Under construction.

   Initialise OpenDriftSimulation

   Args:
       seed: integer or None. A given integer will yield identical
           random numbers drawn each simulation. Random numbers are
           e.g. used to distribute particles spatially when seeding,
           and may be used by modules (subclasses) for e.g. diffusion.
           Specifying a fixed value (default: 0) is useful for sensitivity
           tests. With seed = None, different random numbers will be drawn
           for subsequent runs, even with identical configuration/input.
       iomodule: name of module used to export data
           default: netcdf, see :py:mod:`opendrift.io` for more alternatives.
           `iomodule` is module/filename without preceeding `io_`
       loglevel: set to 0 (default) to retrieve all debug information.
           Provide a higher value (e.g. 20) to receive less output.
           Use the string 'custom' to configure logging from outside.
       logtime: if True, a time stamp is given for each logging line.
                logtime can also be given as a python time specifier
                (e.g. '%H:%M:%S')

   .. py:attribute:: ElementType
      

      

   .. py:attribute:: required_variables
      

      

   .. py:attribute:: required_profiles_z_range
      

      

   .. py:attribute:: max_speed
      :annotation: = 1.3

      

   .. py:attribute:: status_colors
      

      

   .. py:attribute:: duplicate_oils
      :annotation: = ['ALVHEIM BLEND, STATOIL', 'DRAUGEN, STATOIL', 'EKOFISK BLEND 2000', 'EKOFISK BLEND, STATOIL',...

      

   .. py:attribute:: max_water_fraction
      

      

   .. py:method:: update_surface_oilfilm_thickness(self)

      The mass of oil is summed within a grid of 100x100
      cells covering the oil at a given time. Each oil particle
      within each cell is given a film thickness as the amount of
      oil divided by the cell area.


   .. py:method:: biodegradation(self)


   .. py:method:: disperse(self)


   .. py:method:: oil_weathering(self)


   .. py:method:: prepare_run(self)


   .. py:method:: oil_weathering_noaa(self)

      Oil weathering scheme adopted from NOAA PyGNOME model:
      https://github.com/NOAA-ORR-ERD/PyGnome


   .. py:method:: disperse_noaa(self)


   .. py:method:: plot_droplet_spectrum(self)

      Plotting distribution of droplet radii, for debugging


   .. py:method:: evaporation_noaa(self)


   .. py:method:: emulsification_noaa(self)


   .. py:method:: update_terminal_velocity(self, Tprofiles=None, Sprofiles=None, z_index=None)

      Calculate terminal velocity for oil droplets

      according to:

      * Tkalich et al. (2002): Vertical mixing of oil droplets by breaking waves

      * Marine Pollution Bulletin 44, 1219-1229

      If profiles of temperature and salt are passed into this function,
      they will be interpolated from the profiles.
      if not, T,S will be fetched from reader.


   .. py:method:: oil_wave_entrainment_rate(self)


   .. py:method:: prepare_vertical_mixing(self)

      Calculate entrainment probability before main loop


   .. py:method:: surface_wave_mixing(self, time_step_seconds)

      Mix surface oil into water column.


   .. py:method:: surface_stick(self)

      set surfaced particles to exactly zero depth to let them form a slick 


   .. py:method:: get_wave_breaking_droplet_diameter(self)


   .. py:method:: get_wave_breaking_droplet_diameter_liz2017(self)


   .. py:method:: get_wave_breaking_droplet_diameter_johansen2015(self)


   .. py:method:: resurface_elements(self, minimum_depth=None)

      Oil elements reaching surface (or above) form slick, not droplet


   .. py:method:: advect_oil(self)


   .. py:method:: update(self)

      Update positions and properties of oil particles.


   .. py:method:: get_oil_budget(self)

      Get oil budget for the current simulation

      The oil budget consists of the following categories:

      * surface: the sum of variable mass_oil for all active elements where z = 0
      * submerged: the sum of variable mass_oil for all active elements where z < 0
      * stranded: the sum of variable mass_oil for all elements which are stranded
      * evaporated: the sum of variable mass_evaporated for all elements
      * dispersed: the sum of variable mass_dispersed for all elements

      The sum (total mass) shall equal the mass released. Note that the mass of oil
      is conserved, whereas the volume may change with changes in density and
      water uptake (emulsification). Therefore mass should be used for budgets,
      eventually converted to volume (by dividing on density) in the final step
      before presentation.

      Note that mass_oil is the mass of pure oil. The mass of oil emulsion
      (oil containing entrained water droplets) can be calculated as:

      .. code::

          mass_emulsion = mass_oil / (1 - water_fraction)

      I.e. water_fraction = 0 means pure oil, water_fraction = 0.5 means mixture of
      50% oil and 50% water, and water_fraction = 0.9 (which is maximum)
      means 10% oil and 90% water.


   .. py:method:: plot_oil_budget(self, filename=None, ax=None, show_density_viscosity=True, show_wind_and_current=True)


   .. py:method:: get_oil_name(self)


   .. py:method:: cumulative_oil_entrainment_fraction(self)

      Returns the fraction of oil elements which has been entrained vs time


   .. py:method:: plot_oil_density_and_viscosity(self, ax=None, show=True)


   .. py:method:: set_oiltype(self, oiltype)


   .. py:method:: set_oiltype_by_id(self, oiltypeid)


   .. py:method:: set_oiltype_by_json(self, json)


   .. py:method:: set_oiltype_from_file(self, path)


   .. py:method:: store_oil_seed_metadata(self, **kwargs)


   .. py:method:: seed_elements(self, *args, **kwargs)

      Seed elements with given position(s), time and properties.

      Arguments:
          lon: scalar or array
              central longitude(s).
          lat: scalar or array
              central latitude(s).
          radius: scalar or array
              radius in meters around each lon-lat pair,
              within which particles will be randomly seeded.
          number: integer, total number of particles to be seeded
              If number is None, the number of elements is the
              length of lon/lat or time if these are arrays. Otherwise
              the number of elements are obtained from the config-default.
          time: datenum or list
              The time at which particles are seeded/released.
              If time is a list with two elements, elements are seeded
              continously from start/first to end/last time.
              If time is a list with more than two elements, the number of elements
              is equal to len(time) and are seeded as a time series.
          radius_type: string
              If 'gaussian' (default), the radius is the standard deviation in
              x-y-directions. If 'uniform', elements are spread evenly and
              always inside a circle with the given radius.
          kwargs:
              keyword arguments containing properties/attributes and
              values corresponding to the actual particle type (ElementType).
              These are forwarded to the ElementType class. All properties
              for which there are no default value must be specified.


   .. py:method:: seed_cone(self, *args, **kwargs)

      Seed elements along a transect/cone between two points/times

      Arguments:
          lon: scalar or list with 2 elements [lon0, lon1]

          lat: scalar or list with 2 elements [lat0, lat]

          time: datetime or list with 2 elements [t0, t1]

          radius: scalar or list with 2 elements [r0, r1] Unit: meters

          number (int): The number of elements. If this is None, the number of
          elements is taken from configuration.

      Elements are seeded along a transect from
          (lon0, lat0) with uncertainty radius r0 at time t0, towards
          (lon1, lat1) with uncertainty radius r1 at time t1.
          If r0 != r1, the unceetainty radius is linearly changed along
          the transect, thus outlining a "cone".


   .. py:method:: seed_from_gml(self, gmlfile, num_elements=1000, *args, **kwargs)

      Read oil slick contours from GML file, and seed particles within.


   .. py:method:: seed_from_geotiff_thickness(self, filename, number=50000, *args, **kwargs)

      Seed from files as provided by Prof. Chuanmin Hu


   .. py:method:: _substance_name(self)




:mod:`opendrift.models.shipdrift`
=================================

.. py:module:: opendrift.models.shipdrift


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   opendrift.models.shipdrift.ShipObject
   opendrift.models.shipdrift.ShipDrift



.. py:class:: ShipObject(**kwargs)

   Bases: :class:`opendrift.elements.LagrangianArray`

   Extending LagrangianArray with variables relevant for leeway objects.

       

   .. attribute:: variables
      

      


.. py:class:: ShipDrift(*args, **kwargs)

   Bases: :class:`opendrift.models.basemodel.OpenDriftSimulation`

   Demonstration trajectory model based on OpenDrift framework.

   Simply advects a particle (passive tracer with
   no properties except for position) with the ambient wind.

   .. attribute:: ElementType
      

      

   .. attribute:: required_variables
      :annotation: = ['x_wind', 'y_wind', 'land_binary_mask', 'x_sea_water_velocity', 'y_sea_water_velocity', 'sea_surface_wave_stokes_drift_x_velocity', 'sea_surface_wave_stokes_drift_y_velocity', 'sea_surface_wave_significant_height', 'sea_surface_wave_mean_period_from_variance_spectral_density_second_frequency_moment']

      

   .. attribute:: fallback_values
      

      

   .. attribute:: max_speed
      :annotation: = 2

      

   .. attribute:: winwav_angle
      :annotation: = 20

      

   .. attribute:: configspec
      :annotation: = 
           [seed]
               length = float(min=1, max=500, default=80)
               height = float(min=1, max=50, default=12)
               draft = float(min=1, max=20, default=4)
               beam = float(min=1, max=30, default=10)
           [drift]
               current_uncertainty = float(min=0, max=5, default=0.05)
               wind_uncertainty = float(min=0, max=5, default=.5)
           

      

   .. method:: seed_elements(self, *args, **kwargs)

      Seed a given number of particles around given position(s).

      Arguments:
          lon: scalar or array, central longitude(s).
          lat: scalar or array, central latitude(s).
          radius: scalar or array, radius in meters around each lon-lat
          pair, within which particles will be randomly seeded.

          number: integer, total number of particles to be seeded
          Elements are spread equally among the given lon/lat points.
          Default is one particle for each lon-lat pair.

          time: datenum, the time at which particles are seeded/released.
          If time is an array with two elements, elements are seeded
          continously from start/first to end/last time.

          cone: boolean or integer. If True, lon and lat must be two element
          arrays, interpreted as the start and end position of a cone
          within which elements will be seeded. Radius may also be a
          two element array specifying the radius around the points.

          radius_type: string
          If 'gaussian' (default), the radius is the standard deviation in
          x-y-directions. If 'uniform', elements are spread evenly and
          always inside a circle with the given radius.

          kwargs: keyword arguments containing properties/attributes and
          values corresponding to the actual particle type (ElementType).
          These are forwarded to the ElementType class. All properties
          for which there are no default value must be specified.


   .. method:: update(self)

      Any trajectory model implementation must define an update method.
      This method must/can use environment data (self.environment) to
      update properties (including position) of its particles (self.elements)


   .. method:: import_ascii_format(self, filename)




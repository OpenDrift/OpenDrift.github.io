:py:mod:`opendrift.readers.reader_global_landmask`
==================================================

.. py:module:: opendrift.readers.reader_global_landmask


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   opendrift.readers.reader_global_landmask.Reader



Functions
~~~~~~~~~

.. autoapisummary::

   opendrift.readers.reader_global_landmask.get_mask_type
   opendrift.readers.reader_global_landmask.get_mask
   opendrift.readers.reader_global_landmask.plot_land



Attributes
~~~~~~~~~~

.. autoapisummary::

   opendrift.readers.reader_global_landmask.logger
   opendrift.readers.reader_global_landmask.__roaring_mask__


.. py:data:: logger
   

   

.. py:data:: __roaring_mask__
   

   

.. py:function:: get_mask_type()

   Returns whether the landmask is provided by the opendrift_landmask_data
   package (0), or the roaring-landmask package (1).


.. py:function:: get_mask(skippoly=False, extent=None)

   Returns an instance of the landmask type and landmask. The mask data is
   usually shared between threads.


.. py:function:: plot_land(ax, lonmin, latmin, lonmax, latmax, fast, ocean_color='white', land_color=cfeature.COLORS['land'], lscale='auto', globe=None)

   Plot the landmask or the shapes from GSHHG.


.. py:class:: Reader(extent=None, llcrnrlon=None, llcrnrlat=None, urcrnrlon=None, urcrnrlat=None, skippoly=False)

   Bases: :py:obj:`opendrift.readers.basereader.BaseReader`, :py:obj:`opendrift.readers.basereader.ContinuousReader`

   The global landmask reader is based on the coastline data from
   GSHHG (https://www.ngdc.noaa.gov/mgg/shorelines/) optimized for
   checking against landmasks.

   Args:
       :param extent: minx, miny, maxx, maxy bounding box in source CRS for which to include
           geometries. Default None (all geometries).
       :type extent: array of floats, optional

       :param llcrnrlon: minx.
       :type llcrnrlon: float, optional, deprecated in favor of extent.

       :param llcrnrlat: miny.
       :type llcrnrlat: float, optional, deprecated in favor of extent.

       :param urcrnrlon: maxx.
       :type urcrnrlon: float, optional, deprecated in favor of extent.

       :param urcrnrlat: maxy.
       :type urcrnrlat: float, optional, deprecated in favor of extent.

       :param skippoly: use only rasterized landmask to determine whether points are on land.
       :type skippoly: bool, optional, default False.

   Common constructor for all readers

   .. py:attribute:: name
      :annotation: = global_landmask

      

   .. py:attribute:: variables
      :annotation: = ['land_binary_mask']

      

   .. py:attribute:: proj4
      

      

   .. py:attribute:: crs
      

      

   .. py:attribute:: skippoly
      :annotation: = False

      

   .. py:attribute:: extent
      

      

   .. py:attribute:: mask_type
      :annotation: = 0

      

   .. py:method:: __on_land__(x, y)


   .. py:method:: get_variables(requestedVariables, time=None, x=None, y=None, z=None)

      Get binary mask of whether elements are on land or not.

      Args:
          x (deg[]): longitude (decimal degrees)
          y (deg[]): latitude (decimal degrees)
          ...

      x, y is given in reader local projection.

      Returns:
          Binary mask of point x, y on land.





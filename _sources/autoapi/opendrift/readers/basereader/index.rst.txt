:mod:`opendrift.readers.basereader`
===================================

.. py:module:: opendrift.readers.basereader


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   consts/index.rst
   continuous/index.rst
   fakeproj/index.rst
   structured/index.rst
   unstructured/index.rst
   variables/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   opendrift.readers.basereader.StructuredReader
   opendrift.readers.basereader.UnstructuredReader
   opendrift.readers.basereader.ContinuousReader
   opendrift.readers.basereader.Variables
   opendrift.readers.basereader.fakeproj
   opendrift.readers.basereader.ReaderBlock
   opendrift.readers.basereader.BaseReader



.. py:class:: StructuredReader

   Bases: :class:`opendrift.readers.basereader.variables.Variables`

   A structured reader. Data is gridded on a regular grid. Used by e.g.:
   :class:`opendrift.readers.reader_netCDF_CF_generic.Reader`.

   .. attribute:: var_block_before
      

      

   .. attribute:: var_block_after
      

      

   .. attribute:: interpolation
      :annotation: = linearNDFast

      

   .. method:: _get_variables_interpolated_(self, variables, profiles, profiles_depth, time, reader_x, reader_y, z)

      Implemented by different reader types (e.g. :class:`structured.StructuredReader`).

      Arguments are in native projection of reader.



.. py:class:: UnstructuredReader

   Bases: :class:`opendrift.readers.basereader.variables.Variables`

   An unstructured reader. Data is gridded irregularily.

   In order to support the heterogeneous types of unstructured grids, the
   unstructured readers are built up slightly differently than the
   :class:`.structured.StructuredReader` readers. This class, which readers of
   unstrctured grids subclass, provide several methods for aiding in
   interpolation and caching.

   The initial type of grid that this class supports are `triangular prisms <https://en.wikipedia.org/wiki/Types_of_mesh#Triangular_prism>`_. Unstructured in xy-coordinates, x and y is constant in z. z might be non-cartesian (e.g. sigma-levels).

   Caching using UnstructuredBlock
   -------------------------------

   TODO:

   The `StructuredReader`s return a 2D field for `meshgrid(x,y)`. This is not
   so meaningful for `UnstructuredReader` since the variables are iregularily
   placed. The `get_variables` method should therefore be a method required by
   the `StructuredReader` and `ContinuousReader`, and maybe renamed to
   `get_block` for `StructuredReader`.

   For the `UnstructuredReader` we need the equivalent of `get_block`, maybe
   `get_subset` which sets up an `UnstructuredBlock` for the given area or
   volume. This probably requires :meth:`_get_variables_impl_`/ :meth:`__get_variables_derived__`
   to be moved to the outside of :meth:`_get_variables_interpolated_`.

   .. attribute:: var_block_before
      

      

   .. attribute:: var_block_after
      

      

   .. attribute:: boundary
      

      

   .. attribute:: x
      

      

   .. attribute:: y
      

      

   .. attribute:: node_variables
      

      

   .. attribute:: nodes_idx
      

      

   .. attribute:: xc
      

      

   .. attribute:: yc
      

      

   .. attribute:: face_variables
      

      

   .. attribute:: faces_idx
      

      

   .. method:: _get_variables_interpolated_(self, variables, profiles, profiles_depth, time, reader_x, reader_y, z)

      Implemented by different reader types (e.g. :class:`structured.StructuredReader`).

      Arguments are in native projection of reader.


   .. method:: _build_boundary_polygon_(self, x, y)

      Build a polygon of the boundary of the mesh.

      Arguments:
          :param x: Array of node x position, lenght N
          :param y: Array of node y position, length N

      Returns:
          A `shapely.prepareped.prep` `shapely.Polygon`.

          The boundary of the mesh, ideally including holes in the mesh.

      Algorithms:
      -----------

      Try this alogrithm: https://stackoverflow.com/a/14109211/377927

      Boundary edges (line between two nodes) are only referenced by a single
      triangle.

      1. Find a starting edge segment: [v_start, v_next] (v is vertex or node)
      2. Find another _unvisited_ edge segment [v_i, v_j] that has
      either v_i = v_next or v_j = v_next and add the one not equal to v_next to the polygon.
      3. Reset v_next to the newly added point. Mark edge as visited.
      4. Continue untill we reach v_start.

      The polygon has a rotation, but this should not matter for our purpose
      of checking the bounds.

      Note: In order to find holes in the polygon all points must be scanned.

      Approximate using the convex hull:
      ----------------------
      An alternative simple approximation is to use the convex hull of the
      points, but this will miss points along the boundary which form a
      wedge in the boundary (as well as holes in the mesh).

      Holes in the mesh will often be covered by the landmask anyway, so they
      will usually not be a problem.


   .. method:: covers_positions(self, x, y, z=0)

      Check which points are within boundary of mesh.


   .. method:: _build_rtree_(self, x, y)

      Builds an R-tree of x, y


   .. method:: _build_ckdtree_(self, x, y)


   .. method:: __nearest_ckdtree__(idx, x, y)
      :staticmethod:

      Return index of nearest point in cKDTree


   .. method:: __nearest_rtree__(idx, x, y)
      :staticmethod:

      Take array of points and get nearest point in rtree index.


   .. method:: _nearest_node_(self, x, y)

      Return nearest node (id) for x and y


   .. method:: _nearest_face_(self, xc, yc)

      Return nearest element or face (id) for xc and yc



.. py:class:: ContinuousReader

   Bases: :class:`opendrift.readers.basereader.variables.Variables`

   A continuous (in space and time) reader, able to provide
   exact values at any desired point (within bounds). This reader type is
   suitable for constant readers, analytical readers, or readers that are
   static and continuous within the valid domain (e.g. the landmask reader).

   .. method:: _get_variables_interpolated_(self, variables, profiles, profiles_depth, time, reader_x, reader_y, z)

      Implemented by different reader types (e.g. :class:`structured.StructuredReader`).

      Arguments are in native projection of reader.



.. py:class:: Variables

   Bases: :class:`opendrift.readers.basereader.variables.ReaderDomain`

   Handles reading and interpolation of variables.

   .. attribute:: derived_variables
      

      

   .. attribute:: name
      

      

   .. attribute:: buffer
      :annotation: = 0

      

   .. attribute:: convolve
      

      

   .. attribute:: environment_mappers
      :annotation: = []

      

   .. attribute:: environment_mappings
      

      

   .. method:: set_convolution_kernel(self, convolve)

      Set a convolution kernel or kernel size (of array of ones) used by `get_variables` on read variables.


   .. method:: set_buffer_size(self, max_speed, max_vertical_speed=None)

      Adjust buffer to minimise data block size needed to cover elements


   .. method:: wind_from_speed_and_direction(self, env)


   .. method:: calculate_derived_environment_variables(self, env)


   .. method:: _get_variables_impl_(self, variables, profiles, profiles_depth, time, x, y, z)

      Wrapper around reader-specific function get_variables()

      Performs some common operations which should not be duplicated:

          - monitor time spent by this reader
          - convert any numpy arrays to masked arrays
          - add points to x, y and z to get profiles if necessary
          - convolve vectors if `self.convolve` is specified

      This function calls :meth:`__get_variables_derived__` which eventually
      calls :meth:`get_variables` on the implementing reader.


   .. method:: __get_variables_derived__(self, variables, *args, **kwargs)

      Wrapper around get_variables, adding derived


   .. method:: get_variables(self, variables, time=None, x=None, y=None, z=None)
      :abstractmethod:

      Method which must be implemented by all reader-subclasses.

      > Warning: In the future this method is likely to be a requirement of
      > each reader, and it will be up to the reader-type how values are
      > retrieved.

      Obtain and return values of the requested variables at all positions
      (x, y, z) closest to given time.

      Arguments:
          variables: string, or list of strings (standard_name) of
              requested variables. These must be provided by reader.
          time: datetime or None, time at which data are requested.
              Can be None (default) if reader/variable has no time
              dimension (e.g. climatology or landmask).
          x, y: float or ndarrays; coordinates of requested points in the
              Spatial Reference System (SRS) _of the reader (NB!!)_.
          z: float or ndarray; vertical position (in meters, positive up)
              of requested points.
              default: 0 m (unless otherwise documented by reader)
          block: bool, see return below

        Returns:
          data: Dictionary
              keywords: variables (string)
              values:
                  - 1D ndarray of len(x) if StructuredReader. Nearest values
                      (neighbour) of requested position are returned.
                  - 3D ndarray encompassing all requested points in
                      x,y,z domain if UnstructuredReader. It is task of invoking
                      application (OpenDriftSimulation) to perform
                      interpolation in space and time.


   .. method:: _get_variables_interpolated_(self, variables, profiles, profiles_depth, time, reader_x, reader_y, z)
      :abstractmethod:

      Implemented by different reader types (e.g. :class:`structured.StructuredReader`).

      Arguments are in native projection of reader.


   .. method:: get_variables_interpolated_xy(self, variables, profiles=None, profiles_depth=None, time=None, x=None, y=None, z=None, rotate_to_proj=None)

      Get variables in native projection of reader.


   .. method:: get_variables_interpolated(self, variables, profiles=None, profiles_depth=None, time=None, lon=None, lat=None, z=None, rotate_to_proj=None)

      `get_variables_interpolated` is the interface to
      :class:`opendrift.basemodel.OpenDriftSimulation`, and is responsible
      for returning variables at the correct positions. This is done by:

          1. Calling :meth:`_get_variables_interpolated_` which,
          2. calls :meth:`_get_variables_impl_`, which
          3. calls :meth:`__get_variables_derived__`, which
          4. calls :meth:`get_variables`.

      :meth:`_get_variables_impl_`: Works on every variable. If profiles_depth, adds a point at start and end in order to get a full block. This seems specific to `StructuredReader`. Needs to work on both env and env_profiles, but also modifies the behavior to make env_profiles work in the first place.

      :meth:`__get_variables_derived__`: Calculates derived variables from variables present in reader. Needs to work on both env and env_profiles.

      Arguments:
          variables: string, or list of strings (standard_name) of
              requested variables. These must be provided by reader.

          profiles: List of variable names that should be returned for the range in `profiles_depth`.

          profiles_depth: A range [z-start, z-end] for which to return values for profile-variables. The exact z-depth are given by the reader and returned as `z` variable in `env_profiles`.

          time: datetime or None, time at which data are requested.
              Can be None (default) if reader/variable has no time
              dimension (e.g. climatology or landmask).

          lon: N/A

          lat: N/A

          z: float or ndarray; vertical position (in meters, positive up)
              of requested points.
              default: 0 m (unless otherwise documented by reader)

          block: bool, see return below

          rotate_to_proj: N/A

        Returns:

          (env, env_profiles)

          Interpolated variables at x, y and z. `env` contains values at a fixed depth (`z`), while `env_profiles` contains depth-profiles in the range `profile_depth` for the variables listed in `profiles` for each element (in `x`, `y`). The exact depth is determined by the reader and specified in
          `env_profiles['z']`. Thus variables in `env_profiles` are not interpolated in z-direction.



.. py:class:: fakeproj

   .. py:class:: _crs

      .. attribute:: is_geographic
         :annotation: = False

         


   .. attribute:: crs
      

      

   .. attribute:: srs
      :annotation: = None

      

   .. method:: __call__(self, x, y, inverse=False)



.. data:: standard_names
   

   

.. data:: vector_pairs_xy
   :annotation: = [['x_wind', 'y_wind'], ['sea_ice_x_velocity', 'sea_ice_y_velocity'], ['x_sea_water_velocity', 'y_sea_water_velocity'], ['sea_surface_wave_stokes_drift_x_velocity', 'sea_surface_wave_stokes_drift_y_velocity']]

   

.. py:class:: ReaderBlock(data_dict, interpolation_horizontal='linearNDFast', interpolation_vertical='linear')

   Class to store and interpolate the output from a reader with data on a regular (structured) grid.

   .. attribute:: logger
      

      

   .. method:: _initialize_interpolator(self, x, y, z=None)


   .. method:: interpolate(self, x, y, z=None, variables=None, profiles=[], profiles_depth=None)


   .. method:: _interpolate_horizontal_layers(self, data, nearest=False)

      Interpolate all layers of 3d (or 2d) array.


   .. method:: covers_positions(self, x, y, z=None)

      Check if given positions are covered by this reader block.



.. py:class:: BaseReader

   Bases: :class:`opendrift.readers.basereader.variables.Variables`

   An abstract reader. Implementors provide a method to read data and specify how it is interpolated.

   .. attribute:: __metaclass__
      

      

   .. attribute:: verticalbuffer
      :annotation: = 1

      

   .. attribute:: variable_aliases
      

      

   .. attribute:: xy2eastnorth_mapping
      

      

   .. attribute:: logger
      

      

   .. method:: y_is_north(self)


   .. method:: prepare(self, extent, start_time, end_time)

      Prepare reader for given simulation coverage in time and space.


   .. method:: rotate_variable_dict(self, variables, proj_from='+proj=latlong', proj_to=None)


   .. method:: index_of_closest_z(self, requested_z)

      Return (internal) index of z closest to requested z.

      Thickness of layers (of ocean model) are not assumed to be constant.


   .. method:: indices_min_max_z(self, z)

      Return min and max indices of internal vertical dimension,
      covering the requested vertical positions.
      Needed when block is requested (True).

      Arguments:
          z: ndarray of floats, in meters


   .. method:: __repr__(self)

      String representation of the current reader.


   .. method:: performance(self)

      Report the time spent on various tasks


   .. method:: clip_boundary_pixels(self, numpix)

      Trim some (potentially bad) pixels along boundary


   .. method:: plot(self, variable=None, vmin=None, vmax=None, filename=None, title=None, buffer=1, lscale='auto')

      Plot geographical coverage of reader.


   .. method:: get_timeseries_at_position(self, lon, lat, variables=None, start_time=None, end_time=None, times=None)

      Get timeseries of variables from this reader at given position.
              




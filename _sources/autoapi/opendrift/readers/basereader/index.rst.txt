:mod:`opendrift.readers.basereader`
===================================

.. py:module:: opendrift.readers.basereader


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   consts/index.rst
   continuous/index.rst
   fakeproj/index.rst
   structured/index.rst
   unstructured/index.rst
   variables/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   opendrift.readers.basereader.StructuredReader
   opendrift.readers.basereader.UnstructuredReader
   opendrift.readers.basereader.ContinuousReader
   opendrift.readers.basereader.Variables
   opendrift.readers.basereader.ReaderBlock
   opendrift.readers.basereader.BaseReader



.. data:: logger
   

   

.. py:class:: StructuredReader

   Bases: :class:`opendrift.readers.basereader.variables.Variables`

   A structured reader. Data is gridded on a regular grid. Used by e.g.:
   :class:`opendrift.readers.reader_netCDF_CF_generic.Reader`.

   Attributes:

       projected: is `True` if :class:`.fakeproj.fakeproj` is used because of missing projection information. The data points are assumed to be approximately equidistant on the surface (i.e. in meters).

       clipped: pixels to to remove along boundary (e.g. in case of bad data).

   .. seealso::

       :py:mod:`opendrift.readers`

   Initialize self.  See help(type(self)) for accurate signature.

   .. attribute:: projected
      

      

   .. attribute:: shape
      

      

   .. attribute:: clipped
      :annotation: = 0

      

   .. attribute:: x
      

      

   .. attribute:: y
      

      

   .. attribute:: var_block_before
      

      

   .. attribute:: var_block_after
      

      

   .. attribute:: interpolation
      :annotation: = linearNDFast

      

   .. attribute:: convolve
      

      

   .. attribute:: __lonlat2xy_parallel__
      

      

   .. attribute:: __disable_parallel__
      :annotation: = False

      

   .. method:: get_variables(self, variables, time=None, x=None, y=None, z=None)
      :abstractmethod:

      Obtain a _block_ of values of the requested variables at all positions
      (x, y, z) closest to given time. These will be stored in
      :class:`opendrift.readers.interpolation.structured.ReaderBlock` and
      accessed from there.

      Arguments:
          variables: list of variables.

          time: datetime or None, time at which data are requested.

          x, y: float or ndarrays; coordinates of requested points.

          z: float or ndarray; vertical position (in meters, positive up)

        Returns:
          Dictionary

          keywords: variables (string)
          values: 2D ndarray bounding x and y.


   .. method:: set_convolution_kernel(self, convolve)

      Set a convolution kernel or kernel size (of array of ones) used by `get_variables` on read variables.


   .. method:: __convolve_block__(self, env)

      Convolve arrays with a kernel, if reader.convolve is set


   .. method:: _get_variables_interpolated_(self, variables, profiles, profiles_depth, time, reader_x, reader_y, z)

      This method _must_ be implemented by every reader. Usually by
      subclassing one of the reader types (e.g.
      :class:`structured.StructuredReader`).

      Arguments are in _native projection_ of reader.

      .. seealso:

          * :meth:`get_variables_interpolated_xy`.
          * :meth:`get_variables_interpolated`.


   .. method:: __check_env_arrays__(self, env)

      For the StructuredReader the variables are checked before entered into
      the ReaderBlock interpolator. This methods makes the second check a
      no-op.

      .. seealso::

          :meth:`.variables.Variables.__check_env_arrays__`.


   .. method:: xy2lonlat(self, x, y)

      Calculate x,y in own projection from given lon,lat (scalars/arrays).
              


   .. method:: lonlat2xy(self, lon, lat)

      Calculate lon,lat from given x,y (scalars/arrays) in own projection.


   .. method:: pixel_size(self)


   .. method:: _coverage_unit_(self)


   .. method:: _bbox_(self, x, y)

      Find bounding box on grid containing points (x, y)


   .. method:: _make_projected_grid_(self, lon, lat, eq_eps=0.1)

      Make the projected grid in cases where `lon` and `lat` are present as
      2D variables, but not `x` and `y` and assert that it is approximately
      equidistant.

      Args:

          eq_eps: tolerance for equidistance checks.


   .. method:: __validate_projected_grid__(self, eq_eps=0.1)

      Validate that the projected grid is approximately equidistant.

      Args:

          eq_eps: tolerance for equidistance checks.

      Raises:

          AssertionError if not equidistant within `eq_eps`.


   .. method:: _slice_variable_(self, var, indxTime=None, indy=None, indx=None, indz=None, indrealization=None)

      Slice variable depending on number of dimensions available.

      Args:

          All arguments can be `slice` objects or index.

      Returns:

          `var` sliced using the slices or indexes necessary to use depending
          on number of dimensions available.

      Raises:

          Unsupported number of dimensions (outside 2..5) raises an exception.



.. py:class:: UnstructuredReader

   Bases: :class:`opendrift.readers.basereader.variables.Variables`

   An unstructured reader. Data is gridded irregularily.

   The initial type of grid that this class supports are `triangular prisms
   <https://en.wikipedia.org/wiki/Types_of_mesh#Triangular_prism>`_.
   Unstructured in xy-coordinates, x and y is constant in z. z might be
   non-cartesian (e.g. sigma-levels).

   .. seealso::

       :py:mod:`opendrift.readers`

       :class:`.structured.StructuredReader`


   Initialize self.  See help(type(self)) for accurate signature.

   .. attribute:: boundary
      

      

   .. attribute:: x
      

      

   .. attribute:: y
      

      

   .. attribute:: node_variables
      

      

   .. attribute:: nodes_idx
      

      

   .. attribute:: xc
      

      

   .. attribute:: yc
      

      

   .. attribute:: face_variables
      

      

   .. attribute:: faces_idx
      

      

   .. method:: get_variables(self, variables, time=None, x=None, y=None, z=None)
      :abstractmethod:

      Obtain and return values of the requested variables at all positions
      (x, y, z) closest to given time.

      Returns:

          Dictionary with arrays of length len(x) with values at exact positions x, y and z.


   .. method:: _get_variables_interpolated_(self, variables, profiles, profiles_depth, time, reader_x, reader_y, z)

      This method _must_ be implemented by every reader. Usually by
      subclassing one of the reader types (e.g.
      :class:`structured.StructuredReader`).

      Arguments are in _native projection_ of reader.

      .. seealso:

          * :meth:`get_variables_interpolated_xy`.
          * :meth:`get_variables_interpolated`.


   .. method:: _build_boundary_polygon_(self, x, y)

      Build a polygon of the boundary of the mesh.

      Arguments:
          :param x: Array of node x position, lenght N
          :param y: Array of node y position, length N

      Returns:
          A `shapely.prepareped.prep` `shapely.Polygon`.

          The boundary of the mesh, ideally including holes in the mesh.

      Algorithms:

      .. note::

          Try this alogrithm: https://stackoverflow.com/a/14109211/377927

          Boundary edges (line between two nodes) are only referenced by a single
          triangle.

          1. Find a starting edge segment: [v_start, v_next] (v is vertex or node)

          2. Find another _unvisited_ edge segment [v_i, v_j] that has
             either v_i = v_next or v_j = v_next and add the one not equal to v_next to the polygon.

          3. Reset v_next to the newly added point. Mark edge as visited.

          4. Continue untill we reach v_start.

          The polygon has a rotation, but this should not matter for our purpose
          of checking the bounds.

          Note: In order to find holes in the polygon all points must be scanned.

      Approximate using the convex hull:

      An alternative simple approximation is to use the convex hull of the
      points, but this will miss points along the boundary which form a
      wedge in the boundary (as well as holes in the mesh).

      Holes in the mesh will often be covered by the landmask anyway, so they
      will usually not be a problem.


   .. method:: covers_positions(self, x, y, z=0)

      Check which points are within boundary of mesh.


   .. method:: _build_rtree_(self, x, y)

      Builds an R-tree of x, y


   .. method:: _build_ckdtree_(self, x, y)


   .. method:: __nearest_ckdtree__(idx, x, y)
      :staticmethod:

      Return index of nearest point in cKDTree


   .. method:: __nearest_rtree__(idx, x, y)
      :staticmethod:

      Take array of points and get nearest point in rtree index.


   .. method:: _nearest_node_(self, x, y)

      Return nearest node (id) for x and y


   .. method:: _nearest_face_(self, xc, yc)

      Return nearest element or face (id) for xc and yc



.. py:class:: ContinuousReader

   Bases: :class:`opendrift.readers.basereader.variables.Variables`

   A continuous (in space and time) reader, able to provide
   exact values at any desired point (within bounds). This reader type is
   suitable for constant readers, analytical readers, or readers that are
   static and continuous within the valid domain (e.g. the landmask reader).

   .. seealso::

       :py:mod:`opendrift.readers`

   Initialize self.  See help(type(self)) for accurate signature.

   .. method:: get_variables(self, variables, time=None, x=None, y=None, z=None)
      :abstractmethod:

      Obtain and return values of the requested variables at all positions
      (x, y, z) closest to given time.

      Returns:

          Dictionary with arrays of length len(x) with values at exact positions x, y and z.


   .. method:: _get_variables_interpolated_(self, variables, profiles, profiles_depth, time, reader_x, reader_y, z)

      This method _must_ be implemented by every reader. Usually by
      subclassing one of the reader types (e.g.
      :class:`structured.StructuredReader`).

      Arguments are in _native projection_ of reader.

      .. seealso:

          * :meth:`get_variables_interpolated_xy`.
          * :meth:`get_variables_interpolated`.



.. py:class:: Variables

   Bases: :class:`opendrift.readers.basereader.variables.ReaderDomain`

   Handles reading and interpolation of variables.

   Initialize self.  See help(type(self)) for accurate signature.

   .. attribute:: variables
      

      

   .. attribute:: derived_variables
      

      

   .. attribute:: name
      

      

   .. attribute:: buffer
      :annotation: = 0

      

   .. attribute:: environment_mappers
      :annotation: = []

      

   .. attribute:: environment_mappings
      

      

   .. method:: set_buffer_size(self, max_speed)

      Adjust buffer to minimise data block size needed to cover elements.

      The buffer size is calculated from the maximum anticpated speed.
      Seeding over a large area or over longer time can easily cause
      particles to be located outside the block. This is not critical, but
      causes interpolation to be one-sided in time for the relevant
      particles.

      Args:

          max_speed: the maximum speed anticipated for particles.


   .. method:: land_binary_mask_from_ocean_depth(self, env)


   .. method:: wind_from_speed_and_direction(self, env)


   .. method:: __calculate_derived_environment_variables__(self, env)


   .. method:: __check_env_coordinates__(self, env)

      Make sure x and y are floats (and not e.g. int64)


   .. method:: __check_variable_array__(name, variable)
      :staticmethod:

      Ensure arrays are not masked arrays and that values are within valid ranges.


   .. method:: __check_env_arrays__(self, env)

      Ensure arrays are not masked arrays and that values are within valid
      ranges.

      .. seealso::

          Disabled in `StructuredReader` because variables are valided before
          entered into interpolator:

          :meth:`.structured.StructuredReader.__check_env_arrays__`


   .. method:: _get_variables_interpolated_(self, variables, profiles, profiles_depth, time, reader_x, reader_y, z)
      :abstractmethod:

      This method _must_ be implemented by every reader. Usually by
      subclassing one of the reader types (e.g.
      :class:`structured.StructuredReader`).

      Arguments are in _native projection_ of reader.

      .. seealso:

          * :meth:`get_variables_interpolated_xy`.
          * :meth:`get_variables_interpolated`.


   .. method:: get_variables_interpolated_xy(self, variables, profiles=None, profiles_depth=None, time=None, x=None, y=None, z=None, rotate_to_proj=None)

      Get variables in native projection of reader.

      .. seealso::

          * :meth:`get_variables_interpolated`.
          * :meth:`_get_variables_interpolated_`.


   .. method:: get_variables_interpolated(self, variables, profiles=None, profiles_depth=None, time=None, lon=None, lat=None, z=None, rotate_to_proj=None)

      `get_variables_interpolated` is the main interface to
      :class:`opendrift.basemodel.OpenDriftSimulation`, and is responsible
      for returning variables at the correct positions.

      Readers should implement :meth:`_get_variables_interpolated_`.

      Arguments:
          variables: string, or list of strings (standard_name) of
              requested variables. These must be provided by reader.

          profiles: List of variable names that should be returned for the range in `profiles_depth`.

          profiles_depth: A range [z-start, z-end] for which to return values for profile-variables. The exact z-depth are given by the reader and returned as `z` variable in `env_profiles`.

          time: datetime or None, time at which data are requested.
              Can be None (default) if reader/variable has no time
              dimension (e.g. climatology or landmask).

          lon: longitude, 1d array.

          lat: latitude, 1d array, same length as lon.

          z: float or ndarray; vertical position (in meters, positive up)
              of requested points. either scalar or same length as lon, lat.
              default: 0 m (unless otherwise documented by reader)

          block: bool, see return below

          rotate_to_proj: N/A

        Returns:

          (env, env_profiles)

          Interpolated variables at x, y and z. `env` contains values at a fixed depth (`z`), while `env_profiles` contains depth-profiles in the range `profile_depth` for the variables listed in `profiles` for each element (in `x`, `y`). The exact depth is determined by the reader and specified in
          `env_profiles['z']`. Thus variables in `env_profiles` are not interpolated in z-direction.

      .. seealso::

          :meth:`get_variables_interpolated_xy`.



.. data:: standard_names
   

   

.. data:: vector_pairs_xy
   :annotation: = [['x_wind', 'y_wind'], ['sea_ice_x_velocity', 'sea_ice_y_velocity'], ['x_sea_water_velocity', 'y_sea_water_velocity'], ['sea_surface_wave_stokes_drift_x_velocity', 'sea_surface_wave_stokes_drift_y_velocity']]

   

.. py:class:: ReaderBlock(data_dict, interpolation_horizontal='linearNDFast', interpolation_vertical='linear')

   Class to store and interpolate the output from a reader with data on a regular (structured) grid.

   Initialize self.  See help(type(self)) for accurate signature.

   .. method:: _initialize_interpolator(self, x, y, z=None)


   .. method:: interpolate(self, x, y, z=None, variables=None, profiles=[], profiles_depth=None)


   .. method:: _interpolate_horizontal_layers(self, data, nearest=False)

      Interpolate all layers of 3d (or 2d) array.


   .. method:: covers_positions(self, x, y, z=None)

      Check if given positions are covered by this reader block.



.. py:class:: BaseReader

   Bases: :class:`opendrift.readers.basereader.variables.Variables`

   An abstract reader. Implementors provide a method to read data and specify how it is interpolated.

   This class inherits :class:`.variables.Variables` which inherits :class:`.variables.ReaderDomain`. `ReaderDomain` is responsible for the extent and domain of the reader, including checking for out-of-bounds and projection conversion. `Variables` is responsible for returning interpolated data at the requests positions or profiles. Apart from coercing the returned data into the right type for :py:mod:`opendrift.models.basemodel`, it defines the abstract interface to :meth:`.variables.Variables._get_variables_interpolated_` which reader-implementations must provide (_usually_ through one of the main reader-types, see: :py:mod:`opendrift.readers`).

   .. seealso::

       :py:mod:`opendrift.readers`.

       :py:mod:`.variables`.

   Common constructor for all readers

   .. attribute:: __metaclass__
      

      

   .. attribute:: verticalbuffer
      :annotation: = 1

      

   .. attribute:: variable_aliases
      

      

   .. attribute:: xy2eastnorth_mapping
      

      

   .. method:: y_is_north(self)


   .. method:: prepare(self, extent, start_time, end_time)

      Prepare reader for given simulation coverage in time and space.


   .. method:: rotate_variable_dict(self, variables, proj_from='+proj=latlong', proj_to=None)


   .. method:: index_of_closest_z(self, requested_z)

      Return (internal) index of z closest to requested z.

      Thickness of layers (of ocean model) are not assumed to be constant.


   .. method:: indices_min_max_z(self, z)

      Return min and max indices of internal vertical dimension,
      covering the requested vertical positions.
      Needed when block is requested (True).

      Arguments:
          z: ndarray of floats, in meters


   .. method:: performance(self)

      Report the time spent on various tasks


   .. method:: clip_boundary_pixels(self, numpix)

      Trim some (potentially bad) pixels along boundary


   .. method:: plot(self, variable=None, vmin=None, vmax=None, filename=None, title=None, buffer=1, lscale='auto')

      Plot geographical coverage of reader.


   .. method:: get_timeseries_at_position(self, lon, lat, variables=None, start_time=None, end_time=None, times=None)

      Get timeseries of variables from this reader at given position.
              




.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_example_coastline.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_gallery_example_coastline.py:


No stranding
=============


.. code-block:: default


    import numpy as np
    from opendrift.readers import reader_netCDF_CF_generic
    from opendrift.readers import reader_ROMS_native
    from opendrift.models.oceandrift import OceanDrift

    o = OceanDrift(loglevel=20)  # Set loglevel to 0 for debug information
    o.max_speed = 3

    # This example works better using hourly input from Thredds than the daily data from test folder
    reader_nordic = reader_netCDF_CF_generic.Reader('https://thredds.met.no/thredds/dodsC/sea/nordic4km/zdepths1h/aggregate_be')
    #reader_nordic = reader_ROMS_native.Reader(o.test_data_folder() +
    #    '2Feb2016_Nordic_sigma_3d/Nordic-4km_SLEVELS_avg_00_subset2Feb2016.nc')

    o.add_reader([reader_nordic])
    o.set_config('general:coastline_action', 'previous')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    07:42:32 INFO    opendrift: OpenDriftSimulation initialised (version 1.4.2)
    07:42:32 INFO    opendrift.readers.reader_netCDF_CF_generic: Opening dataset: https://thredds.met.no/thredds/dodsC/sea/nordic4km/zdepths1h/aggregate_be
    07:42:32 INFO    opendrift.readers.reader_netCDF_CF_generic: Opening file with Dataset




Seeding elements on a grid


.. code-block:: default

    lons = np.linspace(12, 14.5, 30)
    lats = np.linspace(67.5, 68.5, 30)
    lons, lats = np.meshgrid(lons, lats)
    lon = lons.ravel()
    lat = lats.ravel()

    time = reader_nordic.start_time
    o.seed_elements(lon, lat, radius=0, number=30*30, time=time)

    o.run(steps=24*2, time_step=3600)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    07:42:35 INFO    opendrift: Fallback values will be used for the following variables which have no readers: 
    07:42:35 INFO    opendrift:     x_wind: 0.000000
    07:42:35 INFO    opendrift:     y_wind: 0.000000
    07:42:35 INFO    opendrift:     upward_sea_water_velocity: 0.000000
    07:42:35 INFO    opendrift:     ocean_vertical_diffusivity: 0.000000
    07:42:35 INFO    opendrift:     sea_surface_wave_significant_height: 0.000000
    07:42:35 INFO    opendrift:     sea_surface_wave_stokes_drift_x_velocity: 0.000000
    07:42:35 INFO    opendrift:     sea_surface_wave_stokes_drift_y_velocity: 0.000000
    07:42:35 INFO    opendrift:     sea_surface_wave_period_at_variance_spectral_density_maximum: 0.000000
    07:42:35 INFO    opendrift:     sea_surface_wave_mean_period_from_variance_spectral_density_second_frequency_moment: 0.000000
    07:42:35 INFO    opendrift:     surface_downward_x_stress: 0.000000
    07:42:35 INFO    opendrift:     surface_downward_y_stress: 0.000000
    07:42:35 INFO    opendrift:     turbulent_kinetic_energy: 0.000000
    07:42:35 INFO    opendrift:     turbulent_generic_length_scale: 0.000000
    07:42:35 DEBUG   root: Nothing to prepare for https://thredds.met.no/thredds/dodsC/sea/nordic4km/zdepths1h/aggregate_be
    07:42:35 INFO    opendrift: Adding a dynamical landmask with max. priority based on assumed maximum speed of 3 m/s. Adding a customised landmask may be faster...
    07:42:38 INFO    opendrift: Using existing reader for land_binary_mask
    07:42:38 INFO    opendrift: Moving 81 out of 900 points from land to water
    07:42:40 INFO    opendrift: 2016-09-19 00:30:00 - step 1 of 48 - 900 active elements (0 deactivated)
    07:42:40 INFO    opendrift: 2016-09-19 01:30:00 - step 2 of 48 - 900 active elements (0 deactivated)
    07:42:41 INFO    opendrift: 2016-09-19 02:30:00 - step 3 of 48 - 900 active elements (0 deactivated)
    07:42:41 INFO    opendrift: 2016-09-19 03:30:00 - step 4 of 48 - 900 active elements (0 deactivated)
    07:42:42 INFO    opendrift: 2016-09-19 04:30:00 - step 5 of 48 - 900 active elements (0 deactivated)
    07:42:43 INFO    opendrift: 2016-09-19 05:30:00 - step 6 of 48 - 900 active elements (0 deactivated)
    07:42:43 INFO    opendrift: 2016-09-19 06:30:00 - step 7 of 48 - 900 active elements (0 deactivated)
    07:42:44 INFO    opendrift: 2016-09-19 07:30:00 - step 8 of 48 - 900 active elements (0 deactivated)
    07:42:44 INFO    opendrift: 2016-09-19 08:30:00 - step 9 of 48 - 900 active elements (0 deactivated)
    07:42:45 INFO    opendrift: 2016-09-19 09:30:00 - step 10 of 48 - 900 active elements (0 deactivated)
    07:42:45 INFO    opendrift: 2016-09-19 10:30:00 - step 11 of 48 - 900 active elements (0 deactivated)
    07:42:46 INFO    opendrift: 2016-09-19 11:30:00 - step 12 of 48 - 900 active elements (0 deactivated)
    07:42:47 INFO    opendrift: 2016-09-19 12:30:00 - step 13 of 48 - 900 active elements (0 deactivated)
    07:42:47 INFO    opendrift: 2016-09-19 13:30:00 - step 14 of 48 - 900 active elements (0 deactivated)
    07:42:48 INFO    opendrift: 2016-09-19 14:30:00 - step 15 of 48 - 900 active elements (0 deactivated)
    07:42:48 INFO    opendrift: 2016-09-19 15:30:00 - step 16 of 48 - 900 active elements (0 deactivated)
    07:42:49 INFO    opendrift: 2016-09-19 16:30:00 - step 17 of 48 - 900 active elements (0 deactivated)
    07:42:50 INFO    opendrift: 2016-09-19 17:30:00 - step 18 of 48 - 900 active elements (0 deactivated)
    07:42:50 INFO    opendrift: 2016-09-19 18:30:00 - step 19 of 48 - 900 active elements (0 deactivated)
    07:42:51 INFO    opendrift: 2016-09-19 19:30:00 - step 20 of 48 - 900 active elements (0 deactivated)
    07:42:51 INFO    opendrift: 2016-09-19 20:30:00 - step 21 of 48 - 900 active elements (0 deactivated)
    07:42:52 INFO    opendrift: 2016-09-19 21:30:00 - step 22 of 48 - 900 active elements (0 deactivated)
    07:42:52 INFO    opendrift: 2016-09-19 22:30:00 - step 23 of 48 - 900 active elements (0 deactivated)
    07:42:53 INFO    opendrift: 2016-09-19 23:30:00 - step 24 of 48 - 900 active elements (0 deactivated)
    07:42:53 INFO    opendrift: 2016-09-20 00:30:00 - step 25 of 48 - 900 active elements (0 deactivated)
    07:42:54 INFO    opendrift: 2016-09-20 01:30:00 - step 26 of 48 - 900 active elements (0 deactivated)
    07:42:55 INFO    opendrift: 2016-09-20 02:30:00 - step 27 of 48 - 900 active elements (0 deactivated)
    07:42:55 INFO    opendrift: 2016-09-20 03:30:00 - step 28 of 48 - 900 active elements (0 deactivated)
    07:42:56 INFO    opendrift: 2016-09-20 04:30:00 - step 29 of 48 - 900 active elements (0 deactivated)
    07:42:56 INFO    opendrift: 2016-09-20 05:30:00 - step 30 of 48 - 900 active elements (0 deactivated)
    07:42:57 INFO    opendrift: 2016-09-20 06:30:00 - step 31 of 48 - 900 active elements (0 deactivated)
    07:42:57 INFO    opendrift: 2016-09-20 07:30:00 - step 32 of 48 - 900 active elements (0 deactivated)
    07:42:58 INFO    opendrift: 2016-09-20 08:30:00 - step 33 of 48 - 900 active elements (0 deactivated)
    07:42:59 INFO    opendrift: 2016-09-20 09:30:00 - step 34 of 48 - 900 active elements (0 deactivated)
    07:42:59 INFO    opendrift: 2016-09-20 10:30:00 - step 35 of 48 - 900 active elements (0 deactivated)
    07:43:00 INFO    opendrift: 2016-09-20 11:30:00 - step 36 of 48 - 900 active elements (0 deactivated)
    07:43:00 INFO    opendrift: 2016-09-20 12:30:00 - step 37 of 48 - 900 active elements (0 deactivated)
    07:43:01 INFO    opendrift: 2016-09-20 13:30:00 - step 38 of 48 - 900 active elements (0 deactivated)
    07:43:01 INFO    opendrift: 2016-09-20 14:30:00 - step 39 of 48 - 900 active elements (0 deactivated)
    07:43:02 INFO    opendrift: 2016-09-20 15:30:00 - step 40 of 48 - 900 active elements (0 deactivated)
    07:43:02 INFO    opendrift: 2016-09-20 16:30:00 - step 41 of 48 - 900 active elements (0 deactivated)
    07:43:03 INFO    opendrift: 2016-09-20 17:30:00 - step 42 of 48 - 900 active elements (0 deactivated)
    07:43:03 INFO    opendrift: 2016-09-20 18:30:00 - step 43 of 48 - 900 active elements (0 deactivated)
    07:43:04 INFO    opendrift: 2016-09-20 19:30:00 - step 44 of 48 - 900 active elements (0 deactivated)
    07:43:04 INFO    opendrift: 2016-09-20 20:30:00 - step 45 of 48 - 900 active elements (0 deactivated)
    07:43:04 INFO    opendrift: 2016-09-20 21:30:00 - step 46 of 48 - 900 active elements (0 deactivated)
    07:43:05 INFO    opendrift: 2016-09-20 22:30:00 - step 47 of 48 - 900 active elements (0 deactivated)
    07:43:05 INFO    opendrift: 2016-09-20 23:30:00 - step 48 of 48 - 900 active elements (0 deactivated)




Print and plot results


.. code-block:: default

    print(o)
    o.plot()
    #o.plot(background=['x_sea_water_velocity', 'y_sea_water_velocity'])
    o.animation()




.. image:: /gallery/images/sphx_glr_example_coastline_001.png
    :alt: OpenDrift - OceanDrift 2016-09-19 00:30 to 2016-09-21 00:30 UTC (49 steps)
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ===========================
    --------------------
    Reader performance:
    --------------------
    https://thredds.met.no/thredds/dodsC/sea/nordic4km/zdepths1h/aggregate_be
     0:13:09.4  total time
     0:00:22.6  configuration
     0:01:03.4  preparing main loop
     0:00:57.3  preparing main loop:making dynamical landmask
     0:00:02.1  preparing main loop:moving elements to ocean
     0:10:37.1  main loop:readers
     0:00:05.9  main loop:readers:global_landmask
     0:09:21.6  total
     0:00:00.6  preparing
     0:07:25.2  reading
     0:00:00.1  masking
     0:00:21.8  main loop:readers:postprocessing
     0:11:43.5  main loop
     0:02:19.1  main loop:readers:https<colon>//thredds.met.no/thredds/dodsC/sea/norkyst800m/1h/aggregate_be
     0:00:40.9  interpolation
     0:00:00.4  interpolation_time
     0:01:12.7  rotating vectors
     0:01:18.3  main loop:updating elements
     0:00:03.2  cleaning up
     0:00:01.1  main loop:readers:roms native
     0:00:51.2  main loop:readers:https<colon>//thredds.met.no/thredds/dodsC/sea/nordic4km/zdepths1h/aggregate_be
     0:01:05.5  main loop:readers:https<colon>//thredds.met.no/thredds/dodsC/mepslatest/meps_lagged_6_h_latest_2_5km_latest.nc
     0:00:16.5  main loop:readers:https<colon>//thredds.met.no/thredds/dodsC/sea/mywavewam4/mywavewam4_be
     0:00:00.6  main loop:readers:/root/project/tests/test_data/2Feb2016_Nordic_sigma_3d/AROME_MetCoOp_00_DEF.nc_20160202_subset
     0:00:03.0  main loop:readers:double_gyre
     0:00:00.0  main loop:readers:oscillating_reader
     0:00:02.5  main loop:readers:reader_constant_2d
     0:03:30.9  main loop:readers:https<colon>//thredds.met.no/thredds/dodsC/barents25km_agg
     0:00:16.6  main loop:updating elements:oil weathering
     0:00:02.1  main loop:updating elements:oil weathering:updating viscosities
     0:00:14.3  main loop:updating elements:oil weathering:updating densities
     0:00:09.0  main loop:updating elements:vertical mixing
     0:00:19.6  main loop:readers:/root/project/tests/test_data/16Nov2015_NorKyst_z_surface/norkyst800_subset_16Nov2015.nc
     0:00:46.1  main loop:readers:ArtificialOceanEddy
     0:00:02.0  main loop:readers:/root/project/tests/test_data/16Nov2015_NorKyst_z_surface/arome_subset_16Nov2015.nc
     0:00:00.0  main loop:updating elements:oil weathering:emulsification
     0:00:00.1  main loop:updating elements:oil weathering:dispersion
     0:00:00.6  main loop:readers:reader_current_from_observation
     0:00:01.1  main loop:readers:WIND
     0:00:00.4  main loop:readers:constant_reader
     0:00:00.0  main loop:updating elements:oil weathering:evaporation
    --------------------
    global_landmask
     0:13:09.4  total time
     0:00:22.6  configuration
     0:01:03.4  preparing main loop
     0:00:57.3  preparing main loop:making dynamical landmask
     0:00:02.1  preparing main loop:moving elements to ocean
     0:10:37.1  main loop:readers
     0:00:05.9  main loop:readers:global_landmask
     0:09:21.6  total
     0:00:00.6  preparing
     0:07:25.2  reading
     0:00:00.1  masking
     0:00:21.8  main loop:readers:postprocessing
     0:11:43.5  main loop
     0:02:19.1  main loop:readers:https<colon>//thredds.met.no/thredds/dodsC/sea/norkyst800m/1h/aggregate_be
     0:00:40.9  interpolation
     0:00:00.4  interpolation_time
     0:01:12.7  rotating vectors
     0:01:18.3  main loop:updating elements
     0:00:03.2  cleaning up
     0:00:01.1  main loop:readers:roms native
     0:00:51.2  main loop:readers:https<colon>//thredds.met.no/thredds/dodsC/sea/nordic4km/zdepths1h/aggregate_be
     0:01:05.5  main loop:readers:https<colon>//thredds.met.no/thredds/dodsC/mepslatest/meps_lagged_6_h_latest_2_5km_latest.nc
     0:00:16.5  main loop:readers:https<colon>//thredds.met.no/thredds/dodsC/sea/mywavewam4/mywavewam4_be
     0:00:00.6  main loop:readers:/root/project/tests/test_data/2Feb2016_Nordic_sigma_3d/AROME_MetCoOp_00_DEF.nc_20160202_subset
     0:00:03.0  main loop:readers:double_gyre
     0:00:00.0  main loop:readers:oscillating_reader
     0:00:02.5  main loop:readers:reader_constant_2d
     0:03:30.9  main loop:readers:https<colon>//thredds.met.no/thredds/dodsC/barents25km_agg
     0:00:16.6  main loop:updating elements:oil weathering
     0:00:02.1  main loop:updating elements:oil weathering:updating viscosities
     0:00:14.3  main loop:updating elements:oil weathering:updating densities
     0:00:09.0  main loop:updating elements:vertical mixing
     0:00:19.6  main loop:readers:/root/project/tests/test_data/16Nov2015_NorKyst_z_surface/norkyst800_subset_16Nov2015.nc
     0:00:46.1  main loop:readers:ArtificialOceanEddy
     0:00:02.0  main loop:readers:/root/project/tests/test_data/16Nov2015_NorKyst_z_surface/arome_subset_16Nov2015.nc
     0:00:00.0  main loop:updating elements:oil weathering:emulsification
     0:00:00.1  main loop:updating elements:oil weathering:dispersion
     0:00:00.6  main loop:readers:reader_current_from_observation
     0:00:01.1  main loop:readers:WIND
     0:00:00.4  main loop:readers:constant_reader
     0:00:00.0  main loop:updating elements:oil weathering:evaporation
    --------------------
    Performance:
    13:09.4 total time
       22.6 configuration
     1:03.4 preparing main loop
         57.3 making dynamical landmask
          2.1 moving elements to ocean
      10:37.1 readers
            5.9 global_landmask
     9:21.6 total
        0.6 preparing
     7:25.2 reading
        0.1 masking
           21.8 postprocessing
    11:43.5 main loop
         2:19.1 https://thredds.met.no/thredds/dodsC/sea/norkyst800m/1h/aggregate_be
       40.9 interpolation
        0.4 interpolation_time
     1:12.7 rotating vectors
       1:18.3 updating elements
        3.2 cleaning up
            1.1 roms native
           51.2 https://thredds.met.no/thredds/dodsC/sea/nordic4km/zdepths1h/aggregate_be
         1:05.5 https://thredds.met.no/thredds/dodsC/mepslatest/meps_lagged_6_h_latest_2_5km_latest.nc
           16.5 https://thredds.met.no/thredds/dodsC/sea/mywavewam4/mywavewam4_be
            0.6 /root/project/tests/test_data/2Feb2016_Nordic_sigma_3d/AROME_MetCoOp_00_DEF.nc_20160202_subset
            3.0 double_gyre
            0.0 oscillating_reader
            2.5 reader_constant_2d
         3:30.9 https://thredds.met.no/thredds/dodsC/barents25km_agg
           16.6 oil weathering
              2.1 updating viscosities
             14.3 updating densities
            9.0 vertical mixing
           19.6 /root/project/tests/test_data/16Nov2015_NorKyst_z_surface/norkyst800_subset_16Nov2015.nc
           46.1 ArtificialOceanEddy
            2.0 /root/project/tests/test_data/16Nov2015_NorKyst_z_surface/arome_subset_16Nov2015.nc
              0.0 emulsification
              0.1 dispersion
            0.6 reader_current_from_observation
            1.1 WIND
            0.4 constant_reader
              0.0 evaporation
    --------------------
    ===========================
    Model:  OceanDrift     (OpenDrift version 1.4.2)
            900 active Lagrangian3DArray particles  (0 deactivated, 0 scheduled)
    Projection: +proj=stere +lat_0=90 +lon_0=58 +lat_ts=60 +units=m +a=6.371e+06 +e=0 +no_defs
    -------------------
    Environment variables:
      -----
      sea_floor_depth_below_sea_level
      x_sea_water_velocity
      y_sea_water_velocity
         1) https://thredds.met.no/thredds/dodsC/sea/nordic4km/zdepths1h/aggregate_be
      -----
      land_binary_mask
         1) global_landmask
      -----
    Readers not added for the following variables:
      ocean_vertical_diffusivity
      sea_surface_wave_mean_period_from_variance_spectral_density_second_frequency_moment
      sea_surface_wave_period_at_variance_spectral_density_maximum
      sea_surface_wave_significant_height
      sea_surface_wave_stokes_drift_x_velocity
      sea_surface_wave_stokes_drift_y_velocity
      surface_downward_x_stress
      surface_downward_y_stress
      turbulent_generic_length_scale
      turbulent_kinetic_energy
      upward_sea_water_velocity
      x_wind
      y_wind

    Time:
            Start: 2016-09-19 00:30:00
            Present: 2016-09-21 00:30:00
            Calculation steps: 48 * 1:00:00 - total time: 2 days, 0:00:00
            Output steps: 49 * 1:00:00
    ===========================

    07:43:45 INFO    opendrift: Saving animation to /root/project/docs/source/gallery/animations/example_coastline_0.gif...
    07:43:45 INFO    opendrift: Making animated gif...
    07:43:45 INFO    matplotlib.animation: Animation.save using <class 'matplotlib.animation.ImageMagickWriter'>
    07:43:45 INFO    matplotlib.animation: figure size in inches has been adjusted from 8.421516581712007 x 11.0 to 8.42 x 11.0
    07:43:45 DEBUG   matplotlib.animation: frame size in pixels is 842 x 1100
    07:43:45 INFO    matplotlib.animation: MovieWriter._run: running command: convert -size 842x1100 -depth 8 -delay 10.0 -loop 0 rgba:- /root/project/docs/source/gallery/animations/example_coastline_0.gif
    07:43:46 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:43:47 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:43:48 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:43:49 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:43:50 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:43:51 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:43:52 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:43:53 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:43:55 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:43:56 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:43:57 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:43:58 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:43:59 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:00 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:01 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:02 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:03 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:04 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:05 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:06 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:08 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:09 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:10 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:11 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:12 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:13 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:14 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:15 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:17 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:18 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:19 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:20 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:21 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:22 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:23 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:24 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:25 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:26 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:27 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:28 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:29 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:31 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:32 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:33 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:34 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:35 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:36 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:37 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.
    07:44:38 DEBUG   matplotlib.animation: MovieWriter.grab_frame: Grabbing frame.




.. image:: /gallery/animations/example_coastline_0.gif


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  24.160 seconds)


.. _sphx_glr_download_gallery_example_coastline.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_coastline.py <example_coastline.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_coastline.ipynb <example_coastline.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

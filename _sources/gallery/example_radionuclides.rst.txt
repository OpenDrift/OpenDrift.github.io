.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_gallery_example_radionuclides.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_example_radionuclides.py:


Radionuclides
=============


.. code-block:: default


    from opendrift.readers import reader_netCDF_CF_generic, reader_ROMS_native
    from opendrift.models.radionuclides import RadionuclideDrift
    from datetime import timedelta, datetime
    import numpy as np
    from numpy import dtype


    o = RadionuclideDrift(loglevel=20, seed=0)  # Set loglevel to 0 for debug information

    # Norkyst
    #reader_norkyst = reader_netCDF_CF_generic.Reader(o.test_data_folder() + '/14Jan2016_NorKyst_z_3d/NorKyst-800m_ZDEPTHS_his_00_3Dsubset.nc')
    reader_norkyst = reader_netCDF_CF_generic.Reader('https://thredds.met.no/thredds/dodsC/sea/norkyst800m/1h/aggregate_be')

    o.add_reader([reader_norkyst])

    td=datetime.today()
    time = datetime(td.year, td.month, td.day, 0)

    #latseed= 61.2; lonseed= 4.3    # Sognesjen
    latseed= 59.0;   lonseed= 10.75 # Hvaler/Koster

    ntraj=2000
    iniz=np.random.rand(ntraj) * -10. # seeding the radionuclides in the upper 10m
    init_speciation = np.ones(ntraj)*0
    diam=np.zeros_like(init_speciation,dtype=np.float32)
    o.seed_elements(lonseed, latseed, z=iniz, radius=100,number=ntraj,
                    time=time, diameter=diam, specie=init_speciation)

    init_speciation = np.ones(ntraj)*1
    diam=np.zeros_like(init_speciation,dtype=np.float32) * 5.e-6
    o.seed_elements(lonseed, latseed, z=iniz, radius=100,number=ntraj,
                    time=time,
                    diameter=diam, specie=init_speciation)

    # init_speciation = np.ones(ntraj)*2
    # o.seed_elements(lonseed, latseed, z=iniz, radius=100,number=ntraj,
    #                 time=time,
    #                 diameter=diam, specie=init_speciation)

    # Adjusting some configuration
    o.set_config('processes:turbulentmixing', True)
    o.set_config('turbulentmixing:diffusivitymodel','zero')  # include settling without vertical turbulent mixing
    #o.set_config('turbulentmixing:diffusivitymodel','environment')  # include settling without vertical turbulent mixing
    # Vertical mixing requires fast time step
    o.set_config('turbulentmixing:timestep', 600.) # seconds





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    09:46:49 INFO: OpenDriftSimulation initialised (version 1.2.0)
    09:46:49 INFO: Opening dataset: https://thredds.met.no/thredds/dodsC/sea/norkyst800m/1h/aggregate_be
    09:46:49 INFO: Opening file with Dataset




Activate the desired species


.. code-block:: default

    o.set_config('radionuclide:species:LMM', True)
    #o.set_config('radionuclide:species:LMMcation', True)
    #o.set_config('radionuclide:species:LMManion', True)
    #o.set_config('radionuclide:species:Colloid', True)
    #o.set_config('radionuclide:species:Humic_colloid', True)
    #o.set_config('radionuclide:species:Polymer', True)
    o.set_config('radionuclide:species:Particle_reversible', True)
    #o.set_config('radionuclide:species:Particle_irreversible', True)
    o.set_config('radionuclide:species:Particle_slowly_reversible', True)

    o.set_config('radionuclide:species:Sediment_reversible', True)
    #o.set_config('radionuclide:species:Sediment_irreversible', True)
    o.set_config('radionuclide:species:Sediment_slowly_reversible', True)

    o.set_config('radionuclide:particle_diameter',5.e-6)  # m
    #o.set_config('radionuclide:particle_diameter_uncertainty',1.e-7) # m
    o.set_config('radionuclide:transformations:Kd',2.e0) # (m3/kg)
    #o.set_config('radionuclide:transformations:slow_coeff',1.e-6)

    o.set_config('radionuclide:sediment:resuspension_depth',2.)
    o.set_config('radionuclide:sediment:resuspension_depth_uncert',0.1)
    o.set_config('radionuclide:sediment:resuspension_critvel',0.15)


    #
    #o.set_config('radionuclide:transfer_setup','dummy')
    o.set_config('radionuclide:transfer_setup','Bokna_137Cs')
    #o.set_config('radionuclide:transfer_setup','Sandnesfj_Al')

    # By default, radionuclides do not strand towards coastline
    o.set_config('general:coastline_action', 'previous')

    #o.set_config('general:use_auto_landmask',False)

    o.list_configspec()








Running model (until end of driver data)


.. code-block:: default

    o.run(steps=48*2, time_step=1800, time_step_output=3600)









Print and plot results


.. code-block:: default

    print(o)
    print('Final speciation:')
    for isp,sp in enumerate(o.name_species):
        print ('{:32}: {:>6}'.format(sp,sum(o.elements.specie==isp)))

    print('Number of transformations:')
    for isp in range(o.nspecies):
        print('{}'.format(['{:>9}'.format(np.int(item)) for item in o.ntransformations[isp,:]]) )

    o.animation(color='specie',
                vmin=0,vmax=o.nspecies-1,
                colorbar=True,
                fast = True
                )




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ===========================
    --------------------
    Reader performance:
    --------------------
    https://thredds.met.no/thredds/dodsC/sea/norkyst800m/1h/aggregate_be
     0:01:33.9  total
     0:00:00.1  preparing
     0:01:29.7  reading
     0:00:03.9  interpolation
     0:00:00.0  interpolation_time
     0:00:00.0  masking
    --------------------
    global_landmask
     0:00:00.6  total
     0:00:00.0  preparing
     0:00:00.6  reading
     0:00:00.0  interpolation_time
     0:00:00.0  masking
    --------------------
    Performance:
     1:58.8 total time
        4.9 configuration
        2.9 preparing main loop
          2.8 making dynamical landmask
          0.0 moving elements to ocean
       1:35.5 readers
            0.6 global_landmask
            0.3 postprocessing
     1:50.8 main loop
         1:34.2 https://thredds.met.no/thredds/dodsC/sea/norkyst800m/1h/aggregate_be
         14.5 updating elements
            1.4 vertical mixing
        0.0 cleaning up
    --------------------
    ===========================
    Model:  RadionuclideDrift     (OpenDrift version 1.2.0)
            4000 active Radionuclide particles  (0 deactivated, 0 scheduled)
    Projection: +proj=stere +ellps=WGS84 +lat_0=90.0 +lat_ts=60.0 +x_0=3192800 +y_0=1784000 +lon_0=70
    -------------------
    Environment variables:
      -----
      ocean_vertical_diffusivity
      sea_floor_depth_below_sea_level
      sea_water_salinity
      sea_water_temperature
      upward_sea_water_velocity
      x_sea_water_velocity
      x_wind
      y_sea_water_velocity
      y_wind
         1) https://thredds.met.no/thredds/dodsC/sea/norkyst800m/1h/aggregate_be
      -----
      land_binary_mask
         1) global_landmask
      -----
    Readers not added for the following variables:
      conc3
      surface_downward_x_stress
      surface_downward_y_stress
      turbulent_generic_length_scale
      turbulent_kinetic_energy

    Time:
            Start: 2020-03-04 00:00:00
            Present: 2020-03-06 00:00:00
            Calculation steps: 96 * 0:30:00 - total time: 2 days, 0:00:00
            Output steps: 49 * 1:00:00
    ===========================

    Final speciation:
    LMM                             :   3699
    Particle reversible             :    281
    Particle slowly reversible      :     18
    Sediment reversible             :      2
    Sediment slowly reversible      :      0
    Number of transformations:
    ['        0', '       13', '        0', '       10', '        0']
    ['     1722', '        0', '       18', '        0', '        0']
    ['        0', '        0', '        0', '        0', '        0']
    ['        0', '        8', '        0', '        0', '        0']
    ['        0', '        0', '        0', '        0', '        0']
    /root/project/opendrift/models/basemodel.py:2841: UserWarning: Tight layout not applied. The left and right margins cannot be made large enough to accommodate all axes decorations. 
      fig.canvas.draw()




.. image:: /gallery/animations/example_radionuclides_0.gif


.. code-block:: default


    #o.plot_vertical_distribution()
    #o.plot_property('specie')
    o.animation_profile()







.. image:: /gallery/animations/example_radionuclides_1.gif


.. code-block:: default


    o.plot(linecolor='specie',vmin=0,vmax=o.nspecies-1,fast=True,)



    # Postprocessing: write to concentration netcdf file
    o.conc_lat   = reader_norkyst.lat
    o.conc_lon   = reader_norkyst.lon
    o.conc_topo  = reader_norkyst.get_variables('sea_floor_depth_below_sea_level',
                                           x=[reader_norkyst.xmin,reader_norkyst.xmax],
                                           y=[reader_norkyst.ymin,reader_norkyst.ymax], block=True)['sea_floor_depth_below_sea_level'][:]
    #o.conc_mask  = reader_norkyst.land_binary_mask




.. image:: /gallery/images/sphx_glr_example_radionuclides_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /root/project/opendrift/models/basemodel.py:3260: UserWarning: Tight layout not applied. The left and right margins cannot be made large enough to accommodate all axes decorations. 
      fig.canvas.draw()




.. code:

 o.write_netcdf_radionuclide_density_map('radio_conc.nc', pixelsize_m=200.,
                                       zlevels=[-2.],
                                       activity_unit='Bq',
                                       horizontal_smoothing=True,
                                       smoothing_cells=1,
                                       time_avg_conc=True,
                                       deltat=2., # hours
                                       llcrnrlon=8.9681, llcrnrlat=58.6627,
                                       urcrnrlon=9.2772, urcrnrlat=58.7219,
                                       )


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  25.814 seconds)


.. _sphx_glr_download_gallery_example_radionuclides.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: example_radionuclides.py <example_radionuclides.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: example_radionuclides.ipynb <example_radionuclides.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

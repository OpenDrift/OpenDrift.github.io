.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_example_oil_thickness.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_gallery_example_oil_thickness.py:


Oil thickness
==================================


.. code-block:: default


    from datetime import datetime, timedelta
    import matplotlib.pyplot as plt
    import numpy as np
    from opendrift.models.openoil import OpenOil


    number = 10000
    timestep = timedelta(minutes=10)
    timestep_output = timedelta(minutes=60)
    duration = timedelta(hours=20)
    mass_oil = 2000  # mass oil per particle
    oiltype = '*GENERIC DIESEL'
    #oiltype = '*GENERIC BUNKER C'








First run, where surface oil thickness is updated


.. code-block:: default

    o1 = OpenOil(loglevel=30, weathering_model='noaa')







Northwards wind, eastwards current


.. code-block:: default

    o1.fallback_values['land_binary_mask'] = 0
    o1.fallback_values['x_wind'] = 0
    o1.fallback_values['y_wind'] = 7
    o1.fallback_values['sea_surface_wave_stokes_drift_x_velocity'] = 0
    o1.fallback_values['sea_surface_wave_stokes_drift_y_velocity'] = .3
    o1.fallback_values['x_sea_water_velocity'] = .1
    o1.fallback_values['y_sea_water_velocity'] = 0







Using Johansen droplet spectrum, which depends on oil film thickness


.. code-block:: default

    o1.set_config('wave_entrainment:droplet_size_distribution',
                 'Johansen et al. (2015)')
    o1.set_config('drift:wind_uncertainty', 2)
    o1.set_config('drift:current_uncertainty', .1)
    o1.set_config('processes:dispersion', False)
    o1.set_config('processes:update_oilfilm_thickness', True)

    o1.seed_elements(lon=4.5, lat=60, number=number,
                    mass_oil=mass_oil, radius=1000,
                    oiltype=oiltype,
                    time=datetime.now())
    o1.run(time_step=timestep, time_step_output=timestep_output,
           duration=duration)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /opt/conda/envs/opendrift/lib/python3.8/site-packages/scipy/optimize/minpack.py:807: OptimizeWarning: Covariance of the parameters could not be estimated
      warnings.warn('Covariance of the parameters could not be estimated',
    <frozen importlib._bootstrap>:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject




Animation shows how oil thickness evolves,
and decreases due to evaporation and spreading


.. code-block:: default

    unitfactor=1e6  # show film thickness in micrometers
    o1.animation(color='oil_film_thickness', fast=True,
                 vmin=1e-7*unitfactor, vmax=1e-4*unitfactor,
                 unitfactor=unitfactor, surface_only=True,)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    03:16:16 WARNING: plotting fast. this will make your plots less accurate.




.. image:: /gallery/animations/example_oil_thickness_0.gif

Second run, identical but without updating surface oil thickness


.. code-block:: default

    o2 = OpenOil(loglevel=30, weathering_model='noaa')
    o2.fallback_values = o1.fallback_values

    o2.set_config('wave_entrainment:droplet_size_distribution',
                 'Johansen et al. (2015)')
    o2.set_config('drift:wind_uncertainty', 2)
    o2.set_config('drift:current_uncertainty', .1)
    o2.set_config('processes:dispersion', False)
    o2.set_config('processes:update_oilfilm_thickness', False)

    o2.seed_elements(lon=4.5, lat=60, number=number,
                    mass_oil=mass_oil, radius=1000,
                    oiltype=oiltype,
                    time=datetime.now())
    o2.run(time_step=timestep, time_step_output=timestep_output,
           duration=duration)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /opt/conda/envs/opendrift/lib/python3.8/site-packages/scipy/optimize/minpack.py:807: OptimizeWarning: Covariance of the parameters could not be estimated
      warnings.warn('Covariance of the parameters could not be estimated',




Comparison plots


.. code-block:: default

    o1.plot_oil_budget()
    o2.plot_oil_budget()




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /gallery/images/sphx_glr_example_oil_thickness_001.png
          :alt: *GENERIC DIESEL (841.3 kg/m3) - 2020-06-25 03:14 to 2020-06-25 23:14
          :class: sphx-glr-multi-img

    *

      .. image:: /gallery/images/sphx_glr_example_oil_thickness_002.png
          :alt: *GENERIC DIESEL (841.3 kg/m3) - 2020-06-25 03:16 to 2020-06-25 23:16
          :class: sphx-glr-multi-img





Entrainment


.. code-block:: default

    b1 = o1.get_oil_budget()
    b2 = o2.get_oil_budget()
    plt.plot(b1['mass_surface'], '-r', linewidth=2,
                label='Surface, updated thickness')
    plt.plot(b1['mass_submerged'], '--r', linewidth=2,
                label='Submerged, updated thickness')
    plt.plot(b1['mass_evaporated'], '-.r', linewidth=2,
                label='Evaporated, updated thickness')
    plt.plot(b2['mass_surface'], '-b', linewidth=2,
                label='Surface, constant thickness')
    plt.plot(b2['mass_submerged'], '--b', linewidth=2,
                label='Submerged, constant thickness')
    plt.plot(b2['mass_evaporated'], '-.b', linewidth=2,
                label='Evaporated, constant thickness')
    plt.legend()
    plt.xlabel('Time step')
    plt.show()




.. image:: /gallery/images/sphx_glr_example_oil_thickness_003.png
    :alt: example oil thickness
    :class: sphx-glr-single-img





We see that with the updated film thickness,
the droplets are getting gradually smaller


.. code-block:: default

    r1 = o1.get_property('diameter')[0]
    r2 = o2.get_property('diameter')[0]
    plt.plot(np.median(r1*1e6, 1))
    plt.plot(np.median(r2*1e6, 1))
    plt.legend(['With updated film thickness', 'With constant film thickness'])
    plt.xlabel('Time step')
    plt.ylabel('Median droplet diameter  [micrometer]')
    plt.show()




.. image:: /gallery/images/sphx_glr_example_oil_thickness_004.png
    :alt: example oil thickness
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /opt/conda/envs/opendrift/lib/python3.8/site-packages/numpy/core/fromnumeric.py:746: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.
      a.partition(kth, axis=axis, kind=kind, order=order)
    /opt/conda/envs/opendrift/lib/python3.8/site-packages/numpy/core/fromnumeric.py:746: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.
      a.partition(kth, axis=axis, kind=kind, order=order)




We see that oil film thickness has virtually no impact on horizontal drift


.. code-block:: default

    o1.animation(compare=o2, fast=True,
                 legend=['Updated film thickness', 'Constant/default film thickness'],)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    03:18:15 WARNING: plotting fast. this will make your plots less accurate.




.. image:: /gallery/animations/example_oil_thickness_1.gif


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  49.342 seconds)


.. _sphx_glr_download_gallery_example_oil_thickness.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_oil_thickness.py <example_oil_thickness.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_oil_thickness.ipynb <example_oil_thickness.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

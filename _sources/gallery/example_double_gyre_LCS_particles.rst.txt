.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_gallery_example_double_gyre_LCS_particles.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_example_double_gyre_LCS_particles.py:


Double gyre (propagation schemes, particles)
==================================

Illustrating the difference between Euler and Runge-Kutta propagation
schemes, using an idealised (analytical) eddy current field.


.. code-block:: default


    from datetime import datetime, timedelta
    import matplotlib.pyplot as plt

    from opendrift.readers import reader_double_gyre
    from opendrift.models.oceandrift import OceanDrift









Setting some parameters


.. code-block:: default

    duration = timedelta(seconds=15)  # T
    time_step=timedelta(seconds=.5)
    time_step_output=timedelta(seconds=.5)
    delta=.01  # spatial resolution
    steps = int(duration.total_seconds()/
                time_step_output.total_seconds() + 1)

    o = OceanDrift(loglevel=20)

    o.fallback_values['land_binary_mask'] = 0




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    10:22:58 INFO: OpenDriftSimulation initialised (version 1.2.0)




Note that Runge-Kutta here makes a difference to Euler scheme


.. code-block:: default

    o.set_config('drift:scheme', 'runge-kutta4')

    double_gyre = reader_double_gyre.Reader(epsilon=.25, omega=0.628, A=0.1)
    print(double_gyre)

    o.add_reader(double_gyre)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ===========================
    Reader: double_gyre
    Projection: 
      +proj=stere +lat_0=0 +lon_0=0 +lat_ts=0 +units=m +a=6.371e+06 +e=0 +no_defs
    Coverage: [m]
      xmin: 0.000000   xmax: 2.000000
      ymin: 0.000000   ymax: 1.000000
      Corners (lon, lat):
        (  0.00,   0.00)  (  0.00,   0.00)
        (  0.00,   0.00)  (  0.00,   0.00)
    Vertical levels [m]: 
      Not specified
    Available time range:
      start: None   end: None   step: None
    Variables:
      x_sea_water_velocity
      y_sea_water_velocity
    ===========================





Calculate Lyapunov exponents


.. code-block:: default

    times = [double_gyre.initial_time +
             n*time_step_output for n in range(steps)]
    lcs = o.calculate_ftle(time=times, time_step=time_step,
                           duration=duration, delta=delta, RLCS=False)







Make run with particles for the same period


.. code-block:: default

    o.reset()
    x = [.9]
    y = [.5]
    lon, lat = double_gyre.xy2lonlat(x, y)

    o.seed_elements(lon, lat, radius=.1, number=1000,
                    time=double_gyre.initial_time)
    o.run(duration=duration, time_step=time_step,
          time_step_output=time_step_output)
    o.animation(buffer=0, lcs=lcs)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /root/project/opendrift/models/basemodel.py:2840: UserWarning: Tight layout not applied. The left and right margins cannot be made large enough to accommodate all axes decorations. 
      fig.canvas.draw()




.. image:: /gallery/animations/example_double_gyre_LCS_particles_0.gif


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  25.405 seconds)


.. _sphx_glr_download_gallery_example_double_gyre_LCS_particles.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: example_double_gyre_LCS_particles.py <example_double_gyre_LCS_particles.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: example_double_gyre_LCS_particles.ipynb <example_double_gyre_LCS_particles.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

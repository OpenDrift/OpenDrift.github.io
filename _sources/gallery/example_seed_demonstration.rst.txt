
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/example_seed_demonstration.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_example_seed_demonstration.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_example_seed_demonstration.py:


Seed demonstration
==================

.. GENERATED FROM PYTHON SOURCE LINES 6-14

.. code-block:: default


    from datetime import datetime, timedelta
    import numpy as np
    from opendrift.models.oceandrift import OceanDrift
    from opendrift.models.openoil import OpenOil

    o = OceanDrift(loglevel=50)








.. GENERATED FROM PYTHON SOURCE LINES 15-17

We do not care about landmask or current for this seeding demonstration,
so we simple specify fallback_values instead of adding any readers

.. GENERATED FROM PYTHON SOURCE LINES 17-26

.. code-block:: default

    o.set_config('environment:fallback:land_binary_mask', 0)
    o.set_config('environment:fallback:x_sea_water_velocity', 0)
    o.set_config('environment:fallback:y_sea_water_velocity', 0)
    o.set_config('drift:wind_uncertainty', 0)
    o.set_config('drift:current_uncertainty', 0)

    time=datetime(2016, 1, 20, 12, 30, 0)









.. GENERATED FROM PYTHON SOURCE LINES 27-28

Seeding a single element at a point

.. GENERATED FROM PYTHON SOURCE LINES 28-37

.. code-block:: default

    print('\n' + '='*70)
    print('Seeding a single element at a point:')
    print('o.seed_elements(lon=4, lat=60, time=time)')
    print('='*70)
    o.seed_elements(lon=4, lat=60, time=time)
    #o.run(steps=1)
    o.plot(buffer=.7, fast=True)





.. image:: /gallery/images/sphx_glr_example_seed_demonstration_001.png
    :alt: OpenDrift - OceanDrift 1 elements seeded at 2016-01-20 12:30 UTC
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ======================================================================
    Seeding a single element at a point:
    o.seed_elements(lon=4, lat=60, time=time)
    ======================================================================

    (<GeoAxesSubplot:title={'center':'OpenDrift - OceanDrift\n1 elements seeded at 2016-01-20 12:30 UTC'}>, <module 'matplotlib.pyplot' from '/opt/conda/envs/opendrift/lib/python3.9/site-packages/matplotlib/pyplot.py'>)



.. GENERATED FROM PYTHON SOURCE LINES 38-39

Seeding 100 elements within a radius of 1000 m

.. GENERATED FROM PYTHON SOURCE LINES 39-48

.. code-block:: default

    print('\n' + '='*70)
    print('Seeding 100 elements within a radius of 1000 m:')
    print('o.seed_elements(lon=4, lat=60, number=100, radius=1000, time=time)')
    print('='*70)
    o.seed_elements(lon=4, lat=60, number=100, radius=1000, time=time)
    #o.run(steps=1)
    o.plot(buffer=.7, fast=True)





.. image:: /gallery/images/sphx_glr_example_seed_demonstration_002.png
    :alt: OpenDrift - OceanDrift 101 elements seeded at 2016-01-20 12:30 UTC
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ======================================================================
    Seeding 100 elements within a radius of 1000 m:
    o.seed_elements(lon=4, lat=60, number=100, radius=1000, time=time)
    ======================================================================

    (<GeoAxesSubplot:title={'center':'OpenDrift - OceanDrift\n101 elements seeded at 2016-01-20 12:30 UTC'}>, <module 'matplotlib.pyplot' from '/opt/conda/envs/opendrift/lib/python3.9/site-packages/matplotlib/pyplot.py'>)



.. GENERATED FROM PYTHON SOURCE LINES 49-50

Seeding 100 elements within a radius of 1000 m and specifying a property (here z/depth) as an array

.. GENERATED FROM PYTHON SOURCE LINES 50-62

.. code-block:: default

    print('\n' + '='*70)
    print('Seeding 100 elements within a radius of 1000 m\n and specifying a property (here z/depth) as an array:')
    print('o.seed_elements(lon=4, lat=60, number=100, radius=1000, time=time, z=z)')
    print('='*70)
    z = np.linspace(0, -50, 100)  # Linearly increasing depth
    o.seed_elements(lon=4, lat=60, number=100, radius=1000, time=time, z=z)
    o.set_config('environment:fallback:y_sea_water_velocity', 3)  # Adding some current to be able to visualise depth as color of trajectories
    o.run(steps=1)
    o.plot(linecolor='z', buffer=.7, fast=True)
    o.set_config('environment:fallback:y_sea_water_velocity', 0)





.. image:: /gallery/images/sphx_glr_example_seed_demonstration_003.png
    :alt: OpenDrift - OceanDrift 2016-01-20 12:30 to 2016-01-20 13:30 UTC (2 steps)
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ======================================================================
    Seeding 100 elements within a radius of 1000 m
     and specifying a property (here z/depth) as an array:
    o.seed_elements(lon=4, lat=60, number=100, radius=1000, time=time, z=z)
    ======================================================================




.. GENERATED FROM PYTHON SOURCE LINES 63-64

Seeding 100 elements at user defined locations (here along line between two points)

.. GENERATED FROM PYTHON SOURCE LINES 64-77

.. code-block:: default

    print('\n' + '='*70)
    print('Seeding 100 elements at user defined locations\n (here along line between two points):')
    print('lats = np.linspace(60, 61, 100)\n' \
          'lons = np.linspace(4, 4.8, 100)\n' \
          'o.seed_elements(lon=lons, lat=lats, time=time)')
    print('='*70)
    lats = np.linspace(60, 61, 100)
    lons = np.linspace(4, 4.8, 100)
    o.seed_elements(lon=lons, lat=lats, time=time)
    o.run(steps=1)
    o.plot(buffer=.2, fast=True)





.. image:: /gallery/images/sphx_glr_example_seed_demonstration_004.png
    :alt: OpenDrift - OceanDrift 2016-01-20 12:30 to 2016-01-20 13:30 UTC (2 steps)
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ======================================================================
    Seeding 100 elements at user defined locations
     (here along line between two points):
    lats = np.linspace(60, 61, 100)
    lons = np.linspace(4, 4.8, 100)
    o.seed_elements(lon=lons, lat=lats, time=time)
    ======================================================================

    (<GeoAxesSubplot:title={'center':'OpenDrift - OceanDrift\n2016-01-20 12:30 to 2016-01-20 13:30 UTC (2 steps)'}>, <module 'matplotlib.pyplot' from '/opt/conda/envs/opendrift/lib/python3.9/site-packages/matplotlib/pyplot.py'>)



.. GENERATED FROM PYTHON SOURCE LINES 78-79

Seeding 100 elements between two points with seed_cone() (achieving the same as previous example)

.. GENERATED FROM PYTHON SOURCE LINES 79-87

.. code-block:: default

    print('\n' + '='*70)
    print('Seeding 100 elements between two points with seed_cone() (achieving the same as previous example):')
    print('o.seed_cone(lon=[4, 4.8], lat=[60, 61], number=100, time=time)')
    print('='*70)
    o.seed_cone(lon=[4, 4.8], lat=[60, 61], number=100, time=time)
    o.run(steps=1)
    o.plot(buffer=.2, fast=True)




.. image:: /gallery/images/sphx_glr_example_seed_demonstration_005.png
    :alt: OpenDrift - OceanDrift 2016-01-20 12:30 to 2016-01-20 13:30 UTC (2 steps)
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ======================================================================
    Seeding 100 elements between two points with seed_cone() (achieving the same as previous example):
    o.seed_cone(lon=[4, 4.8], lat=[60, 61], number=100, time=time)
    ======================================================================

    (<GeoAxesSubplot:title={'center':'OpenDrift - OceanDrift\n2016-01-20 12:30 to 2016-01-20 13:30 UTC (2 steps)'}>, <module 'matplotlib.pyplot' from '/opt/conda/envs/opendrift/lib/python3.9/site-packages/matplotlib/pyplot.py'>)



.. GENERATED FROM PYTHON SOURCE LINES 88-89

Seeding 1000 elements along cone with radius/uncertainty increasing linearly from 0 to 5000 m

.. GENERATED FROM PYTHON SOURCE LINES 89-97

.. code-block:: default

    print('\n' + '='*70)
    print('Seeding 1000 elements along cone with radius/uncertainty\n increasing linearly from 0 to 5000 m:')
    print('o.seed_cone(lon=[4, 4.8], lat=[60, 61], number=1000, radius=[0, 5000], time=time)')
    print('='*70)
    o.seed_cone(lon=[4, 4.8], lat=[60, 61], number=1000, radius=[0, 5000], time=time)
    o.run(steps=1)
    o.plot(buffer=.2, fast=True)




.. image:: /gallery/images/sphx_glr_example_seed_demonstration_006.png
    :alt: OpenDrift - OceanDrift 2016-01-20 12:30 to 2016-01-20 13:30 UTC (2 steps)
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ======================================================================
    Seeding 1000 elements along cone with radius/uncertainty
     increasing linearly from 0 to 5000 m:
    o.seed_cone(lon=[4, 4.8], lat=[60, 61], number=1000, radius=[0, 5000], time=time)
    ======================================================================

    (<GeoAxesSubplot:title={'center':'OpenDrift - OceanDrift\n2016-01-20 12:30 to 2016-01-20 13:30 UTC (2 steps)'}>, <module 'matplotlib.pyplot' from '/opt/conda/envs/opendrift/lib/python3.9/site-packages/matplotlib/pyplot.py'>)



.. GENERATED FROM PYTHON SOURCE LINES 98-99

If specifying time as a two element list (start and end, here +5 hours), elements are seeded linearly in time

.. GENERATED FROM PYTHON SOURCE LINES 99-107

.. code-block:: default

    print('\n' + '='*70)
    print('If specifying time as a two element list (start and end,\n here +5 hours), elements are seeded linearly in time:')
    print('o.seed_cone(lon=[4, 4.8], lat=[60, 61], number=1000, radius=[0, 5000], time=[time, time+timedelta(hours=5)])')
    print('='*70)
    o.seed_cone(lon=[4, 4.8], lat=[60, 61], number=1000, radius=[0, 5000], time=[time, time+timedelta(hours=5)])
    o.run(steps=5*4, time_step=900)
    o.animation(fast=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ======================================================================
    If specifying time as a two element list (start and end,
     here +5 hours), elements are seeded linearly in time:
    o.seed_cone(lon=[4, 4.8], lat=[60, 61], number=1000, radius=[0, 5000], time=[time, time+timedelta(hours=5)])
    ======================================================================
    MovieWriter imagemagick unavailable; using Pillow instead.




.. GENERATED FROM PYTHON SOURCE LINES 108-109

.. image:: /gallery/animations/example_seed_demonstration_0.gif

.. GENERATED FROM PYTHON SOURCE LINES 109-124

.. code-block:: default



    print('\n' + '='*70)
    print('Any model/module may provide specialised seeding-functions, such as \n seeding oil within contours read from a GML file:')
    print('o.seed_from_gml(o.test_data_folder() + "radarsat_oil_satellite_observation/RS2_20151116_002619_0127_SCNB_HH_SGF_433012_9730_12182143_Oil.gml", num_elements=2000)')
    print('='*70)
    o = OpenOil(loglevel=50)
    o.set_config('environment:fallback:x_wind', 0)
    o.set_config('environment:fallback:y_wind', 0)
    o.set_config('environment:fallback:x_sea_water_velocity', 0)
    o.set_config('environment:fallback:y_sea_water_velocity', 0)
    o.seed_from_gml(o.test_data_folder() + 'radarsat_oil_satellite_observation/RS2_20151116_002619_0127_SCNB_HH_SGF_433012_9730_12182143_Oil.gml', num_elements=2000)
    o.run(steps=1, time_step=1800, time_step_output=1800)
    o.plot(buffer=.03, fast=True)




.. image:: /gallery/images/sphx_glr_example_seed_demonstration_007.png
    :alt: OpenDrift - OpenOil (AASGARD A 2003) 2015-11-16 00:26 to 2015-11-16 00:56 UTC (2 steps)
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ======================================================================
    Any model/module may provide specialised seeding-functions, such as 
     seeding oil within contours read from a GML file:
    o.seed_from_gml(o.test_data_folder() + "radarsat_oil_satellite_observation/RS2_20151116_002619_0127_SCNB_HH_SGF_433012_9730_12182143_Oil.gml", num_elements=2000)
    ======================================================================
    querying DB:
    Oil.name ==  'AASGARD A 2003'

    (<GeoAxesSubplot:title={'center':'OpenDrift - OpenOil (AASGARD A 2003)\n2015-11-16 00:26 to 2015-11-16 00:56 UTC (2 steps)'}>, <module 'matplotlib.pyplot' from '/opt/conda/envs/opendrift/lib/python3.9/site-packages/matplotlib/pyplot.py'>)




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  43.018 seconds)


.. _sphx_glr_download_gallery_example_seed_demonstration.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_seed_demonstration.py <example_seed_demonstration.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_seed_demonstration.ipynb <example_seed_demonstration.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
